{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ping Lab Rotation Project Developing Knowledge Graphs relating Cardiovascular Disease and Oxidative Stress This work was presented at the December 6th BioText Mining Meeting. Slides from that presentation can be found here Tools caseOLAP : A novel text-mining platform to find strenght of relation between entities in two categories through searching of PubMed ID abstracts. Neo4j : A popular graph database implementation used to represent the knowledge graph ElasticSearch : A powerful search engine allowing full text searches Methods We began this project by manually curating 161 Cardiovascular disease drugs, and 223 Markers of Oxidative Stress (These markers are often referred to as Chemicals inside this documentation). With those lists in mind, we downloading the full dataset of available pubmed abstracts, and indexed them and associated metadata using elasticsearch. This allows us to then search for terms within pubmed and where they occur. We specifically looked for occurrences of the drugs and markers within PubMed. The markers of oxidative stress are binned in to 3 categories: Initiation, Regulation, and Outcomes of oxidative stress. To quantify the relationship between drugs and markers, caseOLAP was run using their occurrences within PubMed. The result is a table where each drug has a caseOLAP for each of the 3 categories of oxidative stress markers. The final step was to map Drugs to pathways/mechanisms of action. We used the graphical database of Reactome to do this linkage. A drug can then be categorised by the reaction its involved in and the pathway that reaction is a piece of.","title":"Home"},{"location":"#ping-lab-rotation-project","text":"Developing Knowledge Graphs relating Cardiovascular Disease and Oxidative Stress This work was presented at the December 6th BioText Mining Meeting. Slides from that presentation can be found here","title":"Ping Lab Rotation Project"},{"location":"#tools","text":"caseOLAP : A novel text-mining platform to find strenght of relation between entities in two categories through searching of PubMed ID abstracts. Neo4j : A popular graph database implementation used to represent the knowledge graph ElasticSearch : A powerful search engine allowing full text searches","title":"Tools"},{"location":"#methods","text":"We began this project by manually curating 161 Cardiovascular disease drugs, and 223 Markers of Oxidative Stress (These markers are often referred to as Chemicals inside this documentation). With those lists in mind, we downloading the full dataset of available pubmed abstracts, and indexed them and associated metadata using elasticsearch. This allows us to then search for terms within pubmed and where they occur. We specifically looked for occurrences of the drugs and markers within PubMed. The markers of oxidative stress are binned in to 3 categories: Initiation, Regulation, and Outcomes of oxidative stress. To quantify the relationship between drugs and markers, caseOLAP was run using their occurrences within PubMed. The result is a table where each drug has a caseOLAP for each of the 3 categories of oxidative stress markers. The final step was to map Drugs to pathways/mechanisms of action. We used the graphical database of Reactome to do this linkage. A drug can then be categorised by the reaction its involved in and the pathway that reaction is a piece of.","title":"Methods"},{"location":"implementation/Create_Drug_Cooccurance_Graph/","text":"Creating Co-Occurence Graph of Drugs-Chemicals-PMIDs This notebook creates a graph database storing the relation of drugs and chemicals related to oxidative stress and their occurance in PubMed abstracts Nodes are created for drugs, chemicals, articles, and MeSH terms. import neo4j_functions.driver as neo4j_driver import pandas as pd import importlib drug_list_df = pd.read_csv('lib/Drug list total 04.05.19 - Overview Drug list.csv') drug_occurance_df = pd.read_csv('lib/Drug_PMID_occurances.csv') chemical_list_df = pd.read_csv('lib/Oxidative Stress Text Mining Targets 4.1 - Summary of Oxidative Stress.csv') chemical_occurance_df = pd.read_csv('lib/Chemical_PMID_occurances.csv') Merging Drug List with Drug Occurance Data Sets Duplicate drug names in the lab provided list are merged, the drug with an associated category is kept if possible Deduplicated list of drug names is merged with a dataframe for drug occurance generated on the CaseOLAP cloud instance Notebook used to generate drug occurance list located at /home/ubuntu/RotationStd/elasticsearch/chemical_drug_elastic_occurance.ipynb Final merged dataframe saved in to import folder of neo4j instance # Removing Duplicate drug names, keeping version with a drug category if possible deduped_drug_list = drug_list_df.sort_values(by='Drug Category').drop_duplicates(subset=['Name'], keep='first') # Merging drug list with drug occurance list drug_occurance_df['MeSH'] = drug_occurance_df['MeSH'].str.replace('[', '').str.replace(']', '').str.replace( ' , '') drug_list_occurance_df = drug_occurance_df.merge( deduped_drug_list.rename(columns={ 'Name': 'drug', 'Drug Category': 'category', 'MeSH Descriptor': 'drug_mesh', }), how='inner', validate='m:1' ) # Values with NaN for category or synonym replaced # NaN for synonym replaced with drug name, category replaced with 'None' drug_list_occurance_df['drug'] = drug_list_occurance_df['drug'].str.strip() drug_list_occurance_df.loc[drug_list_occurance_df.MeSH == '', 'MeSH'] = 'None' drug_list_occurance_df.loc[drug_list_occurance_df.category.isnull(), 'category'] = 'None' drug_list_occurance_df.loc[drug_list_occurance_df.drug_mesh.isnull(), 'drug_mesh'] = 'None' drug_list_occurance_df.loc[drug_list_occurance_df.Synonyms.isnull(), 'Synonyms'] = drug_list_occurance_df[drug_list_occurance_df.Synonyms.isnull()].drug # Saving file to import area of local neo4j instance drug_list_occurance_file = '/Users/akre96/Library/Application Support/Neo4j Desktop/Application/neo4jDatabases/database-dc2bbd3b-84e9-421e-8594-9fe29be9bb02/installation-3.5.6/import/drug_list_occurance.csv' drug_list_occurance_df.to_csv(drug_list_occurance_file, index=False) drug_list_occurance_df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } MeSH PMID abstract title drug category # Synonyms drug_mesh MeSH tree(s) Common adverse effects Dosage (freq/amount/time/delivery) Duration (time) Pham Action 0 Actinomycetales, chemistry, enzymology, Adenos... 8784428 a phosphotransferase which modifies the alpha ... Acarbose 7-phosphotransferase from Actinoplane... Acarbose Alpha-glucosidase Inhibitors 54 Acarbosa, Acarbose, Acarbosum Acarbose D09.698.629.802.100 Hypoglycaemia, Hypoglycaemic \\ncoma, pneumatos... 3/25-50-100mg/day/po 4-8 weeks intervals Glycoside \\nHydrolase Inhibitors 1 Acarbose, Adult, Blood Glucose, metabolism, Cl... 6350115 in a double blind study we have compared the e... Effect of acarbose, pectin, a combination of a... Acarbose Alpha-glucosidase Inhibitors 54 Acarbosa, Acarbose, Acarbosum Acarbose D09.698.629.802.100 Hypoglycaemia, Hypoglycaemic \\ncoma, pneumatos... 3/25-50-100mg/day/po 4-8 weeks intervals Glycoside \\nHydrolase Inhibitors 2 Acarbose, Adult, Aged, Blood Glucose, metaboli... 9663365 acarbose is an alpha glucosidase inhibitor app... Effects of beano on the tolerability and pharm... Acarbose Alpha-glucosidase Inhibitors 54 Acarbosa, Acarbose, Acarbosum Acarbose D09.698.629.802.100 Hypoglycaemia, Hypoglycaemic \\ncoma, pneumatos... 3/25-50-100mg/day/po 4-8 weeks intervals Glycoside \\nHydrolase Inhibitors 3 Acarbose, administration dosage, Animals, Bo... 11779583 as alpha glucosidase inhibitor, the antidiabet... Chronic acarbose-feeding increases GLUT1 prote... Acarbose Alpha-glucosidase Inhibitors 54 Acarbosa, Acarbose, Acarbosum Acarbose D09.698.629.802.100 Hypoglycaemia, Hypoglycaemic \\ncoma, pneumatos... 3/25-50-100mg/day/po 4-8 weeks intervals Glycoside \\nHydrolase Inhibitors 4 Acarbose, Aged, Blood Glucose, metabolism, Dia... 9428831 to compare the therapeutic potential of acarbo... Efficacy of 24-week monotherapy with acarbose,... Acarbose Alpha-glucosidase Inhibitors 54 Acarbosa, Acarbose, Acarbosum Acarbose D09.698.629.802.100 Hypoglycaemia, Hypoglycaemic \\ncoma, pneumatos... 3/25-50-100mg/day/po 4-8 weeks intervals Glycoside \\nHydrolase Inhibitors Creating Neo4J Graph Database for Drug occurance in PMIDs Neo4J Driver initialized Query formed to import data from list generated in previous section of this notebook Loading csv Creating drug entities with name, category, and synonym fields Creating article entities with PMID, abstract, title, and MeSH fields Creating edges labeled OCCURANCE for connecting drugs referenced by a PMID importlib.reload(neo4j_driver) driver = neo4j_driver.driver(uri = bolt://localhost:7687 , user = neo4j , password = drug1234 ) import_data_query = ( LOAD CSV WITH HEADERS FROM %s AS row MERGE (drug:Drug {name: row.drug, category: row.category, synonyms: row.Synonyms}) MERGE (article:Article {PMID: row.PMID, abstract: row.abstract, title: row.title, MeSH: split(row.MeSH, %s)}) MERGE (drug)-[:OCCURANCE]- (article) MERGE (drugmesh:MeSH {name: row.drug_mesh}) MERGE (drug)-[:OCCURANCE]- (article) MERGE (drug)-[:HAS_MESH]- (drugmesh) % (' file:///' + 'drug_list_occurance.csv' + ' ', ', ' ) ) print('Query:\\n\\t', import_data_query) with driver.driver.session() as session: result = session.run(import_data_query) Query: LOAD CSV WITH HEADERS FROM file:///drug_list_occurance.csv AS row MERGE (drug:Drug {name: row.drug, category: row.category, synonyms: row.Synonyms}) MERGE (article:Article {PMID: row.PMID, abstract: row.abstract, title: row.title, MeSH: split(row.MeSH, ', ')}) MERGE (drug)-[:OCCURANCE]- (article) MERGE (drugmesh:MeSH {name: row.drug_mesh}) MERGE (drug)-[:OCCURANCE]- (article) MERGE (drug)-[:HAS_MESH]- (drugmesh) Merging Chemical List with Chemical Occurance Data Sets deduped_chem_list = chemical_list_df\\ .dropna(subset=['Molecule/Enzyme/Protein'])\\ .sort_values(by='Molecular and Functional Categories')\\ .drop_duplicates(subset=['Molecule/Enzyme/Protein'], keep='first')\\ .fillna('None') chemical_occurance_df['MeSH'] = chemical_occurance_df['MeSH'].str.replace('[', '').str.replace(']', '').str.replace( ' , '') chem_list_occurance_df = chemical_occurance_df.merge( deduped_chem_list.rename(columns={ 'Molecule/Enzyme/Protein': 'chemical', 'Chemical Formula': 'formula', 'Molecular and Functional Categories': 'GO_MF', 'Biological Events of Oxidative Stress': 'GO_Oxidative_Stress', 'MeSH Heading': 'chemical_mesh' }), how='inner', validate='m:1' ).fillna('None') chem_list_occurance_df['chemical'] = chem_list_occurance_df.chemical.str.strip() chem_list_occurance_df.loc[chem_list_occurance_df.MeSH == '', 'MeSH'] = 'None' chem_list_occurance_df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } MeSH PMID abstract title chemical GO_Oxidative_Stress GO_MF chemical_mesh MeSH Supplementary MeSH tree numbers formula Examples Pharm Actions Tree Numbers References 0 None 31368101 coronary spasm plays an important role in the ... Association of East Asian Variant Aldehyde Deh... 4-hydroxy-2-nonenal (4-HNE) 135 Lipid Peroxidation Products Aldehydes 4-hydroxy-2-nonenal D02.047 C9H16O2 4-HNE, MDA Cross-Linking Reagents D27.720.470.410.210 None 1 Acetylcholinesterase, metabolism, Aldehydes, m... 10463393 we have investigated the effect of soman induc... Increased levels of nitrogen oxides and lipid ... 4-hydroxy-2-nonenal (4-HNE) 135 Lipid Peroxidation Products Aldehydes 4-hydroxy-2-nonenal D02.047 C9H16O2 4-HNE, MDA Cross-Linking Reagents D27.720.470.410.210 None 2 Aldehydes, chemistry, Amines, chemistry, Benzy... 8448343 the reaction of trans 4 hydroxy 2 nonenal (4 h... Pyrrole formation from 4-hydroxynonenal and pr... 4-hydroxy-2-nonenal (4-HNE) 135 Lipid Peroxidation Products Aldehydes 4-hydroxy-2-nonenal D02.047 C9H16O2 4-HNE, MDA Cross-Linking Reagents D27.720.470.410.210 None 3 Animals, Blood-Brain Barrier, metabolism, path... 29775963 brain ischemic preconditioning (ipc) with mild... Brain ischemic preconditioning protects agains... 4-hydroxy-2-nonenal (4-HNE) 135 Lipid Peroxidation Products Aldehydes 4-hydroxy-2-nonenal D02.047 C9H16O2 4-HNE, MDA Cross-Linking Reagents D27.720.470.410.210 None 4 Alzheimer Disease, drug therapy, enzymology, p... 30218858 excessive production of amyloid \u03b2 (a\u03b2) induced... Neuro-protective effects of aloperine in an Al... 4-hydroxy-2-nonenal (4-HNE) 135 Lipid Peroxidation Products Aldehydes 4-hydroxy-2-nonenal D02.047 C9H16O2 4-HNE, MDA Cross-Linking Reagents D27.720.470.410.210 None # Saving file to import area of local neo4j instance chem_list_occurance_file = '/Users/akre96/Library/Application Support/Neo4j Desktop/Application/neo4jDatabases/database-dc2bbd3b-84e9-421e-8594-9fe29be9bb02/installation-3.5.6/import/chem_list_occurance.csv' chem_list_occurance_df.to_csv(chem_list_occurance_file, index=False) Adding to Neo4J Graph Database for Chemical occurance in PMIDs Query formed to import data from list generated in previous section of this notebook Loading csv Creating chemical entities with name, example, and formula fields Merges article entities with PMID, abstract, title, and MeSH fields Creating edges labeled OCCURANCE for connecting drugs referenced by a PMID import_chemical_data_query = ( LOAD CSV WITH HEADERS FROM %s AS row MERGE (chem:Chemical {name: row.chemical, example: row.Examples, formula: row.formula}) MERGE (article:Article {PMID: row.PMID, abstract: row.abstract, title: row.title, MeSH: split(row.MeSH, %s)}) MERGE (mesh:MeSH {name: row.chemical_mesh}) MERGE (chem)-[:OCCURANCE]- (article) MERGE (chem)-[:HAS_MESH]- (mesh) % (' file:///' + 'chem_list_occurance.csv' + ' ', ', ' ) ) print('Query:\\n\\t', import_chemical_data_query) with driver.driver.session() as session: result = session.run(import_chemical_data_query) Query: LOAD CSV WITH HEADERS FROM file:///chem_list_occurance.csv AS row MERGE (chem:Chemical {name: row.chemical, example: row.Examples, formula: row.formula}) MERGE (article:Article {PMID: row.PMID, abstract: row.abstract, title: row.title, MeSH: split(row.MeSH, ', ')}) MERGE (mesh:MeSH {name: row.chemical_mesh}) MERGE (chem)-[:OCCURANCE]- (article) MERGE (chem)-[:HAS_MESH]- (mesh) Adding MeSH descriptors from Articles as MeSH node Adds nodes from mesh descriptor list Deletes \"none\" node article_mesh_descriptors_query = ( MATCH (article:Article) UNWIND article.MeSH AS m MERGE (artMesh:MeSH {name: m}) MERGE (article)-[:HAS_MESH]- (artMesh) ) print('Query:\\n\\t', article_mesh_descriptors_query) with driver.driver.session() as session: result = session.run(article_mesh_descriptors_query) Query: MATCH (article:Article) UNWIND article.MeSH AS m MERGE (artMesh:MeSH {name: m}) MERGE (article)-[:HAS_MESH]- (artMesh) delete_none_mesh_descriptors_query = ( MATCH (m:MeSH {name: 'None'}) DETACH DELETE m ) print('Query:\\n\\t', delete_none_mesh_descriptors_query) with driver.driver.session() as session: result = session.run(delete_none_mesh_descriptors_query) Query: MATCH (m:MeSH {name: 'None'}) DETACH DELETE m","title":"Creating Drug/Chemical Co-Occurence GraphDB"},{"location":"implementation/Create_Drug_Cooccurance_Graph/#creating-co-occurence-graph-of-drugs-chemicals-pmids","text":"This notebook creates a graph database storing the relation of drugs and chemicals related to oxidative stress and their occurance in PubMed abstracts Nodes are created for drugs, chemicals, articles, and MeSH terms. import neo4j_functions.driver as neo4j_driver import pandas as pd import importlib drug_list_df = pd.read_csv('lib/Drug list total 04.05.19 - Overview Drug list.csv') drug_occurance_df = pd.read_csv('lib/Drug_PMID_occurances.csv') chemical_list_df = pd.read_csv('lib/Oxidative Stress Text Mining Targets 4.1 - Summary of Oxidative Stress.csv') chemical_occurance_df = pd.read_csv('lib/Chemical_PMID_occurances.csv')","title":"Creating Co-Occurence Graph of Drugs-Chemicals-PMIDs"},{"location":"implementation/Create_Drug_Cooccurance_Graph/#merging-drug-list-with-drug-occurance-data-sets","text":"Duplicate drug names in the lab provided list are merged, the drug with an associated category is kept if possible Deduplicated list of drug names is merged with a dataframe for drug occurance generated on the CaseOLAP cloud instance Notebook used to generate drug occurance list located at /home/ubuntu/RotationStd/elasticsearch/chemical_drug_elastic_occurance.ipynb Final merged dataframe saved in to import folder of neo4j instance # Removing Duplicate drug names, keeping version with a drug category if possible deduped_drug_list = drug_list_df.sort_values(by='Drug Category').drop_duplicates(subset=['Name'], keep='first') # Merging drug list with drug occurance list drug_occurance_df['MeSH'] = drug_occurance_df['MeSH'].str.replace('[', '').str.replace(']', '').str.replace( ' , '') drug_list_occurance_df = drug_occurance_df.merge( deduped_drug_list.rename(columns={ 'Name': 'drug', 'Drug Category': 'category', 'MeSH Descriptor': 'drug_mesh', }), how='inner', validate='m:1' ) # Values with NaN for category or synonym replaced # NaN for synonym replaced with drug name, category replaced with 'None' drug_list_occurance_df['drug'] = drug_list_occurance_df['drug'].str.strip() drug_list_occurance_df.loc[drug_list_occurance_df.MeSH == '', 'MeSH'] = 'None' drug_list_occurance_df.loc[drug_list_occurance_df.category.isnull(), 'category'] = 'None' drug_list_occurance_df.loc[drug_list_occurance_df.drug_mesh.isnull(), 'drug_mesh'] = 'None' drug_list_occurance_df.loc[drug_list_occurance_df.Synonyms.isnull(), 'Synonyms'] = drug_list_occurance_df[drug_list_occurance_df.Synonyms.isnull()].drug # Saving file to import area of local neo4j instance drug_list_occurance_file = '/Users/akre96/Library/Application Support/Neo4j Desktop/Application/neo4jDatabases/database-dc2bbd3b-84e9-421e-8594-9fe29be9bb02/installation-3.5.6/import/drug_list_occurance.csv' drug_list_occurance_df.to_csv(drug_list_occurance_file, index=False) drug_list_occurance_df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } MeSH PMID abstract title drug category # Synonyms drug_mesh MeSH tree(s) Common adverse effects Dosage (freq/amount/time/delivery) Duration (time) Pham Action 0 Actinomycetales, chemistry, enzymology, Adenos... 8784428 a phosphotransferase which modifies the alpha ... Acarbose 7-phosphotransferase from Actinoplane... Acarbose Alpha-glucosidase Inhibitors 54 Acarbosa, Acarbose, Acarbosum Acarbose D09.698.629.802.100 Hypoglycaemia, Hypoglycaemic \\ncoma, pneumatos... 3/25-50-100mg/day/po 4-8 weeks intervals Glycoside \\nHydrolase Inhibitors 1 Acarbose, Adult, Blood Glucose, metabolism, Cl... 6350115 in a double blind study we have compared the e... Effect of acarbose, pectin, a combination of a... Acarbose Alpha-glucosidase Inhibitors 54 Acarbosa, Acarbose, Acarbosum Acarbose D09.698.629.802.100 Hypoglycaemia, Hypoglycaemic \\ncoma, pneumatos... 3/25-50-100mg/day/po 4-8 weeks intervals Glycoside \\nHydrolase Inhibitors 2 Acarbose, Adult, Aged, Blood Glucose, metaboli... 9663365 acarbose is an alpha glucosidase inhibitor app... Effects of beano on the tolerability and pharm... Acarbose Alpha-glucosidase Inhibitors 54 Acarbosa, Acarbose, Acarbosum Acarbose D09.698.629.802.100 Hypoglycaemia, Hypoglycaemic \\ncoma, pneumatos... 3/25-50-100mg/day/po 4-8 weeks intervals Glycoside \\nHydrolase Inhibitors 3 Acarbose, administration dosage, Animals, Bo... 11779583 as alpha glucosidase inhibitor, the antidiabet... Chronic acarbose-feeding increases GLUT1 prote... Acarbose Alpha-glucosidase Inhibitors 54 Acarbosa, Acarbose, Acarbosum Acarbose D09.698.629.802.100 Hypoglycaemia, Hypoglycaemic \\ncoma, pneumatos... 3/25-50-100mg/day/po 4-8 weeks intervals Glycoside \\nHydrolase Inhibitors 4 Acarbose, Aged, Blood Glucose, metabolism, Dia... 9428831 to compare the therapeutic potential of acarbo... Efficacy of 24-week monotherapy with acarbose,... Acarbose Alpha-glucosidase Inhibitors 54 Acarbosa, Acarbose, Acarbosum Acarbose D09.698.629.802.100 Hypoglycaemia, Hypoglycaemic \\ncoma, pneumatos... 3/25-50-100mg/day/po 4-8 weeks intervals Glycoside \\nHydrolase Inhibitors","title":"Merging Drug List with Drug Occurance Data Sets"},{"location":"implementation/Create_Drug_Cooccurance_Graph/#creating-neo4j-graph-database-for-drug-occurance-in-pmids","text":"Neo4J Driver initialized Query formed to import data from list generated in previous section of this notebook Loading csv Creating drug entities with name, category, and synonym fields Creating article entities with PMID, abstract, title, and MeSH fields Creating edges labeled OCCURANCE for connecting drugs referenced by a PMID importlib.reload(neo4j_driver) driver = neo4j_driver.driver(uri = bolt://localhost:7687 , user = neo4j , password = drug1234 ) import_data_query = ( LOAD CSV WITH HEADERS FROM %s AS row MERGE (drug:Drug {name: row.drug, category: row.category, synonyms: row.Synonyms}) MERGE (article:Article {PMID: row.PMID, abstract: row.abstract, title: row.title, MeSH: split(row.MeSH, %s)}) MERGE (drug)-[:OCCURANCE]- (article) MERGE (drugmesh:MeSH {name: row.drug_mesh}) MERGE (drug)-[:OCCURANCE]- (article) MERGE (drug)-[:HAS_MESH]- (drugmesh) % (' file:///' + 'drug_list_occurance.csv' + ' ', ', ' ) ) print('Query:\\n\\t', import_data_query) with driver.driver.session() as session: result = session.run(import_data_query) Query: LOAD CSV WITH HEADERS FROM file:///drug_list_occurance.csv AS row MERGE (drug:Drug {name: row.drug, category: row.category, synonyms: row.Synonyms}) MERGE (article:Article {PMID: row.PMID, abstract: row.abstract, title: row.title, MeSH: split(row.MeSH, ', ')}) MERGE (drug)-[:OCCURANCE]- (article) MERGE (drugmesh:MeSH {name: row.drug_mesh}) MERGE (drug)-[:OCCURANCE]- (article) MERGE (drug)-[:HAS_MESH]- (drugmesh)","title":"Creating Neo4J Graph Database for Drug occurance in PMIDs"},{"location":"implementation/Create_Drug_Cooccurance_Graph/#merging-chemical-list-with-chemical-occurance-data-sets","text":"deduped_chem_list = chemical_list_df\\ .dropna(subset=['Molecule/Enzyme/Protein'])\\ .sort_values(by='Molecular and Functional Categories')\\ .drop_duplicates(subset=['Molecule/Enzyme/Protein'], keep='first')\\ .fillna('None') chemical_occurance_df['MeSH'] = chemical_occurance_df['MeSH'].str.replace('[', '').str.replace(']', '').str.replace( ' , '') chem_list_occurance_df = chemical_occurance_df.merge( deduped_chem_list.rename(columns={ 'Molecule/Enzyme/Protein': 'chemical', 'Chemical Formula': 'formula', 'Molecular and Functional Categories': 'GO_MF', 'Biological Events of Oxidative Stress': 'GO_Oxidative_Stress', 'MeSH Heading': 'chemical_mesh' }), how='inner', validate='m:1' ).fillna('None') chem_list_occurance_df['chemical'] = chem_list_occurance_df.chemical.str.strip() chem_list_occurance_df.loc[chem_list_occurance_df.MeSH == '', 'MeSH'] = 'None' chem_list_occurance_df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } MeSH PMID abstract title chemical GO_Oxidative_Stress GO_MF chemical_mesh MeSH Supplementary MeSH tree numbers formula Examples Pharm Actions Tree Numbers References 0 None 31368101 coronary spasm plays an important role in the ... Association of East Asian Variant Aldehyde Deh... 4-hydroxy-2-nonenal (4-HNE) 135 Lipid Peroxidation Products Aldehydes 4-hydroxy-2-nonenal D02.047 C9H16O2 4-HNE, MDA Cross-Linking Reagents D27.720.470.410.210 None 1 Acetylcholinesterase, metabolism, Aldehydes, m... 10463393 we have investigated the effect of soman induc... Increased levels of nitrogen oxides and lipid ... 4-hydroxy-2-nonenal (4-HNE) 135 Lipid Peroxidation Products Aldehydes 4-hydroxy-2-nonenal D02.047 C9H16O2 4-HNE, MDA Cross-Linking Reagents D27.720.470.410.210 None 2 Aldehydes, chemistry, Amines, chemistry, Benzy... 8448343 the reaction of trans 4 hydroxy 2 nonenal (4 h... Pyrrole formation from 4-hydroxynonenal and pr... 4-hydroxy-2-nonenal (4-HNE) 135 Lipid Peroxidation Products Aldehydes 4-hydroxy-2-nonenal D02.047 C9H16O2 4-HNE, MDA Cross-Linking Reagents D27.720.470.410.210 None 3 Animals, Blood-Brain Barrier, metabolism, path... 29775963 brain ischemic preconditioning (ipc) with mild... Brain ischemic preconditioning protects agains... 4-hydroxy-2-nonenal (4-HNE) 135 Lipid Peroxidation Products Aldehydes 4-hydroxy-2-nonenal D02.047 C9H16O2 4-HNE, MDA Cross-Linking Reagents D27.720.470.410.210 None 4 Alzheimer Disease, drug therapy, enzymology, p... 30218858 excessive production of amyloid \u03b2 (a\u03b2) induced... Neuro-protective effects of aloperine in an Al... 4-hydroxy-2-nonenal (4-HNE) 135 Lipid Peroxidation Products Aldehydes 4-hydroxy-2-nonenal D02.047 C9H16O2 4-HNE, MDA Cross-Linking Reagents D27.720.470.410.210 None # Saving file to import area of local neo4j instance chem_list_occurance_file = '/Users/akre96/Library/Application Support/Neo4j Desktop/Application/neo4jDatabases/database-dc2bbd3b-84e9-421e-8594-9fe29be9bb02/installation-3.5.6/import/chem_list_occurance.csv' chem_list_occurance_df.to_csv(chem_list_occurance_file, index=False)","title":"Merging Chemical List with Chemical Occurance Data Sets"},{"location":"implementation/Create_Drug_Cooccurance_Graph/#adding-to-neo4j-graph-database-for-chemical-occurance-in-pmids","text":"Query formed to import data from list generated in previous section of this notebook Loading csv Creating chemical entities with name, example, and formula fields Merges article entities with PMID, abstract, title, and MeSH fields Creating edges labeled OCCURANCE for connecting drugs referenced by a PMID import_chemical_data_query = ( LOAD CSV WITH HEADERS FROM %s AS row MERGE (chem:Chemical {name: row.chemical, example: row.Examples, formula: row.formula}) MERGE (article:Article {PMID: row.PMID, abstract: row.abstract, title: row.title, MeSH: split(row.MeSH, %s)}) MERGE (mesh:MeSH {name: row.chemical_mesh}) MERGE (chem)-[:OCCURANCE]- (article) MERGE (chem)-[:HAS_MESH]- (mesh) % (' file:///' + 'chem_list_occurance.csv' + ' ', ', ' ) ) print('Query:\\n\\t', import_chemical_data_query) with driver.driver.session() as session: result = session.run(import_chemical_data_query) Query: LOAD CSV WITH HEADERS FROM file:///chem_list_occurance.csv AS row MERGE (chem:Chemical {name: row.chemical, example: row.Examples, formula: row.formula}) MERGE (article:Article {PMID: row.PMID, abstract: row.abstract, title: row.title, MeSH: split(row.MeSH, ', ')}) MERGE (mesh:MeSH {name: row.chemical_mesh}) MERGE (chem)-[:OCCURANCE]- (article) MERGE (chem)-[:HAS_MESH]- (mesh)","title":"Adding to Neo4J Graph Database for Chemical occurance in PMIDs"},{"location":"implementation/Create_Drug_Cooccurance_Graph/#adding-mesh-descriptors-from-articles-as-mesh-node","text":"Adds nodes from mesh descriptor list Deletes \"none\" node article_mesh_descriptors_query = ( MATCH (article:Article) UNWIND article.MeSH AS m MERGE (artMesh:MeSH {name: m}) MERGE (article)-[:HAS_MESH]- (artMesh) ) print('Query:\\n\\t', article_mesh_descriptors_query) with driver.driver.session() as session: result = session.run(article_mesh_descriptors_query) Query: MATCH (article:Article) UNWIND article.MeSH AS m MERGE (artMesh:MeSH {name: m}) MERGE (article)-[:HAS_MESH]- (artMesh) delete_none_mesh_descriptors_query = ( MATCH (m:MeSH {name: 'None'}) DETACH DELETE m ) print('Query:\\n\\t', delete_none_mesh_descriptors_query) with driver.driver.session() as session: result = session.run(delete_none_mesh_descriptors_query) Query: MATCH (m:MeSH {name: 'None'}) DETACH DELETE m","title":"Adding MeSH descriptors from Articles as MeSH node"},{"location":"implementation/Explore_Drug_chemical_OxStress/Explore_Drug_chemical_OxStress/","text":"CaseOLAP Score + Linking Drugs to Reactome Pathways This notebook first tries to map drugs curated by Alex and David to entities in Reactome. Next these reactome entites are mapped to pathways and reactions. The caseolap score for drugs in a pathway are averaged and plotted. Samir Akre - December 2019 import neo4j_functions.driver as neo4j_driver import pandas as pd import importlib import progressbar import seaborn as sns import matplotlib.pyplot as plt Importing curated lists of drugs and chemicals chemical_list_df = pd.read_csv('lib/oxidative_stress_chemicals_SA_10222019.csv') drug_list_df = pd.read_csv('lib/drug_list_SA_10222019.csv') chemical_list_df.head(n=2) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Biological Events of Oxidative Stress Molecular and Functional Categories Molecule/Enzyme/Protein MeSH Heading MeSH Supplementary MeSH tree numbers Chemical Formula Examples Pharm Actions Tree Numbers References 0 Initiation of Oxidative Reactive Oxygen Species (ROS) Superoxide (anion radical) Superoxides NaN D01.248.497.158.685.750.850; D01.339.431.374.8... O2- Superoxide, Hydrogen Peroxide Oxidants D27.720.642,\\nD27.888.569.540 PMID: 25547488 1 Initiation of Oxidative Reactive Oxygen Species (ROS) Hydrogen Peroxide Hydrogen Peroxide NaN D01.248.497.158.685.750.424; D01.339.431.374.4... H2O2 NaN Anti-Infective Agents, Local D27.505.954.122.187 NaN drug_list_df.head(n=2) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Drug Category # Name Synonyms MeSH Descriptor MeSH tree(s) Common adverse effects Dosage (freq/amount/time/delivery) Duration (time) Pharm Action ... Unnamed: 1015 Unnamed: 1016 Unnamed: 1017 Unnamed: 1018 Unnamed: 1019 Unnamed: 1020 Unnamed: 1021 Unnamed: 1022 Unnamed: 1023 Unnamed: 1024 0 Anticoagulants 1.0 heparin ['Calciparine', 'Eparina', 'heparina', 'Hepari... heparin D09.698.373.400 Thrombocytopenia, Cerebral haemorrhage, Haemog... 1/18U/kg/iv 2 days Anticoagulants, \\nFibrinolytic Agents ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 1 Anticoagulants 2.0 warfarin ['4-Hydroxy-3-(3-oxo-1-phenylbutyl)coumarin', ... warfarin D03.383.663.283.446.520.914\\nD03.633.100.150.4... Haemorrhage, Haematoma, anaemia, Epistaxis, hy... 1/2-10mg/day/po As needed Anticoagulants, \\nRodenticides ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 2 rows \u00d7 1025 columns Looking for reactome ids of drugs in curated list Looks for the lower case name of the drug from the curated list to match any of the lowercase names a drug in reactome is listed in. Outputs pandas data frame under variable drugs_in_reactome 58/155 drugs found to have counter parts in reactome importlib.reload(neo4j_driver) reactome_driver = neo4j_driver.driver(uri = bolt://localhost:7687 , user = neo4j , password = Akre1234 ) Test to see if I can find any drug in the reactome data set reactome_driver.search_item_in_array( array_field= name , item=' herceptin ', class_type='Drug', info_cols = ['displayName', 'stId', 'isInDisease'], verbose=True ) Query: MATCH (a:Drug) WHERE toLower( herceptin ) IN [x in a.name | toLower(x)] RETURN a.displayName, a.stId, a.isInDisease .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } displayName stId isInDisease 0 trastuzumab [extracellular region] R-ALL-9634466 True Querying to find reactome ID for each drug in curated list TODO: Refine search criteria drugs_in_reactome = pd.DataFrame() for (drug_name, drug_cat), _ in drug_list_df.groupby(['Name', 'Drug Category']): result = reactome_driver.search_item_in_array( array_field= name , item=' %s ' % drug_name, class_type='Drug', info_cols = ['displayName', 'stId', 'isInDisease'] ) result['Name'] = drug_name result['drug_cat'] = drug_cat.strip() drugs_in_reactome = drugs_in_reactome.append(result) drugs_in_reactome.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } displayName stId isInDisease Name drug_cat 0 acebutolol [extracellular region] R-ALL-9610988 True acebutolol Beta Blockers 0 amlodipine [extracellular region] R-ALL-9614079 True amlodipine Calcium Antagonist 0 apixaban [extracellular region] R-ALL-9038732 True apixaban Thrombolytics 0 atenolol [extracellular region] R-ALL-9610989 True atenolol Beta Blockers 0 benazepril [endoplasmic reticulum lumen] R-ALL-9619005 True benazepril ACE Inhibitors print('Initial Drug List Size: ', drug_list_df.Name.nunique()) print('Drugs found in Reactome: ', drugs_in_reactome.Name.nunique()) Initial Drug List Size: 156 Drugs found in Reactome: 58 drugs_in_reactome.groupby('Name').drug_cat.unique() Name acebutolol [Beta Blockers] amlodipine [Calcium Antagonist] apixaban [Thrombolytics] atenolol [Beta Blockers] benazepril [ACE Inhibitors] betaxolol [Beta Blockers] candesartan [Angiotensin II Antagonists] cangrelor [Antiplatelets] captopril [ACE Inhibitors] carvedilol [Beta Blockers] clopidogrel [Antiplatelets] dabigatran [Thrombolytics] diltiazem [Calcium Antagonist, Calcium Channel Blockers] disopyramide [Na Channel Blockers] dobutamine [Inotropes] dofetilide [Potassium Channel Blockers] edoxaban [Thrombolytics] enalapril [ACE Inhibitors] enoximone [Phosphodiesterase Inhbitors] esmolol [Beta Blockers] felodipine [Calcium Antagonist] flecainide [Na Channel Blockers] fosinopril [ACE Inhibitors] ibutilide [Potassium Channel Blockers] irbesartan [Angiotensin II Antagonists] isoprenaline [Inotropes] isradipine [Calcium Antagonist] labetalol [Beta Blockers] lidocaine [Na Channel Blockers] lisinopril [ACE Inhibitors] losartan [Angiotensin II Antagonists] metoprolol [Beta Blockers] mexiletine [Na Channel Blockers] milrinone [Phosphodiesterase Inhbitors] nebivolol [Beta Blockers] nicardipine [Calcium Antagonist] nifedipine [Calcium Antagonist] nisoldipine [Calcium Antagonist] olmesartan [Angiotensin II Antagonists] perindopril [ACE Inhibitors] phenytoin [Na Channel Blockers] pindolol [Beta Blockers] prasugrel [Antiplatelets] procainamide [Na Channel Blockers] propafenone [Na Channel Blockers] propranolol [Beta Blockers] quinapril [ACE Inhibitors] quinidine [Na Channel Blockers] ramipril [ACE Inhibitors] rivaroxaban [Thrombolytics] sotalol [Beta Blockers, Potassium Channel Blockers] telmisartan [Angiotensin II Antagonists] ticagrelor [Antiplatelets] ticlopidine [Antiplatelets] tocainide [Na Channel Blockers] valsartan [Angiotensin II Antagonists] verapamil [Calcium Antagonist, Calcium Channel Blockers] warfarin [Anticoagulants] Name: drug_cat, dtype: object caseolap_results = pd.read_csv('lib/caseolap.csv') drugs_with_caseOLAP = drugs_in_reactome.merge( caseolap_results.rename(columns={'protein': 'Name'}), how='inner', validate='m:1' ).set_index('Name') print('Drugs found in caseOLAP and Reactome: ', drugs_with_caseOLAP.displayName.nunique()) drugs_with_caseOLAP.head() Drugs found in caseOLAP and Reactome: 58 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } displayName stId isInDisease drug_cat IoOS OoOS RoOS Name acebutolol acebutolol [extracellular region] R-ALL-9610988 True Beta Blockers 0.037757 0.070040 0.074837 amlodipine amlodipine [extracellular region] R-ALL-9614079 True Calcium Antagonist 0.184230 0.120305 0.138113 apixaban apixaban [extracellular region] R-ALL-9038732 True Thrombolytics 0.043904 0.069014 0.028798 atenolol atenolol [extracellular region] R-ALL-9610989 True Beta Blockers 0.166591 0.081671 0.139500 benazepril benazepril [endoplasmic reticulum lumen] R-ALL-9619005 True ACE Inhibitors 0.082279 0.062858 0.094923 import json drug_pal_dict = json.load(open('lib/drug_cat_palette.json', 'r')) chem_pal_dict = json.load(open('lib/chem_cat_palette.json', 'r')) print(chem_pal_dict) {'Initiation of Oxidative': [0.86, 0.3712, 0.33999999999999997], 'Outcomes of Oxidative Stress': [0.33999999999999997, 0.86, 0.3712], 'Regulation of Oxidative Stress': [0.3712, 0.33999999999999997, 0.86]} NOTE : Color of drug categories (label on far left) seems to be buggy. Propafenone should be white, but is not. Warfarin is white but should be blue. drugs_with_caseOLAP['color'] = drugs_with_caseOLAP.drug_cat.map(drug_pal_dict).fillna('white') clust = sns.clustermap( drugs_with_caseOLAP[['IoOS', 'OoOS', 'RoOS']].drop_duplicates(), figsize=(6,16), row_colors=drugs_with_caseOLAP['color'], col_colors=[chem_pal_dict[cat] for cat in ['Initiation of Oxidative', 'Outcomes of Oxidative Stress', 'Regulation of Oxidative Stress']] ) ax = clust.ax_heatmap y_lims = ax.get_ylim() ax.set_ylim([y_lims[0] + 0.5, y_lims[1] - .5]) (58.0, 0.0) Looking for reactions associated with each drug found in the Reactome database Looks for 25 \"nearest\" pathways marked as Pathways to any drug within 1-3 nodes Outputs to pathways variable as a pandas dataframe Creates CSV output/drug_reactome_pathways_caseolap.csv # Re-initializing driver to account for changes made to driver function importlib.reload(neo4j_driver) driver = neo4j_driver.driver(uri = bolt://localhost:7687 , user = neo4j , password = Akre1234 ) # For each reactome drug ID, looks for closest pathways within 1-2 nodes reactions = pd.DataFrame() for (reactome_id, IoOS, OoOS, RoOS), d_df, in progressbar.progressbar(drugs_with_caseOLAP.groupby(['stId', 'IoOS', 'OoOS', 'RoOS'])): query = ( MATCH (a:Drug {stId: '%s'})-[]-(c)-[]-(b:ReactionLikeEvent) -[:hasEvent]-(p:Pathway) WHERE b.speciesName = 'Homo sapiens' AND NOT c.schemaClass IN ['Compartment', 'InstanceEdit'] RETURN DISTINCT a.displayName, b.displayName, c.displayName, c.schemaClass, p.displayName % (reactome_id) ) query_res = driver.run_query(query) result = driver.results_to_df(query_res, ['a.displayName', 'b.displayName', 'c.displayName', 'c.schemaClass', 'p.displayName']) result['IoOS'] = IoOS result['OoOS'] = OoOS result['RoOS'] = RoOS reactions = reactions.append(result, ignore_index=True, sort=False) reactions = reactions.rename( columns={ 'a.displayName': 'Drug', 'b.displayName': 'Reaction', 'c.displayName': 'Intermediate Node', 'c.schemaClass': 'Intermediate Class', 'p.displayName': 'Pathway' } ) reactions.to_csv('output/drug_reactome_reactions_caseolap.csv', index=False) reactions.head() 100% (58 of 58) |########################| Elapsed Time: 0:00:01 Time: 0:00:01 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Drug Reaction Intermediate Node Intermediate Class Pathway IoOS OoOS RoOS 0 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer VKORC1 inhibitors [cytosol] DefinedSet Metabolism of vitamin K 0.077812 0.261603 0.164026 1 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer Warfarin traps human vitamin K epoxide reducta... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 2 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer Warfarin and vitamin K compete for binding to ... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 3 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer Pharmacogenetic-guided dosing of coumarin anti... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 4 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer [On the history of vitamin K, dicoumarol and w... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 reactions = pd.read_csv('output/drug_reactome_reactions_caseolap.csv') print('Drugs remaining:', reactions.Drug.nunique()) pd.DataFrame(reactions.groupby('Pathway').Drug.nunique()).sort_values(by='Drug', ascending=False) Drugs remaining: 35 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Drug Pathway Adrenoceptors 11 Metabolism of Angiotensinogen to Angiotensins 8 Peptide ligand-binding receptors 6 Common Pathway of Fibrin Clot Formation 5 Intrinsic Pathway of Fibrin Clot Formation 5 P2Y receptors 5 Defective CYP1B1 causes Glaucoma 1 Metabolism of vitamin K 1 # Pathway by sum score in each category pathways_IoOS = pd.DataFrame( reactions.groupby('Pathway').IoOS.mean() ).reset_index().sort_values(by='IoOS', ascending=False) pathways_IoOS.head() # Plotting top 15 and bottom 10 pathways sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(8, 12)) sns.barplot( y='Pathway', x='IoOS', order=pd.concat([pathways_IoOS.head(15), pathways_IoOS.tail(10)]).drop_duplicates().Pathway, data=reactions, ax=ax ) ax.set_xlabel('Mean Score for Initiation') ax.set_ylabel('') ax.set_title('IoOS') sns.despine() # Pathway by sum score in each category pathways_RoOS = pd.DataFrame( reactions.groupby('Pathway').RoOS.mean() ).reset_index().sort_values(by='RoOS', ascending=False) pathways_IoOS.head() # Plotting top 15 and bottom 10 pathways sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(8, 12)) sns.barplot( y='Pathway', x='RoOS', order=pd.concat([pathways_IoOS.head(15), pathways_IoOS.tail(10)]).drop_duplicates().Pathway, data=reactions, ax=ax ) ax.set_xlabel('Mean Score for Regulation') ax.set_ylabel('') ax.set_title('RoOS') sns.despine() # Pathway by sum score in each category pathways_OoOS = pd.DataFrame( reactions.groupby('Pathway').OoOS.mean() ).reset_index().sort_values(by='OoOS', ascending=False) # Plotting top 15 and bottom 10 pathways sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(8, 12)) sns.barplot( y='Pathway', x='OoOS', order=pd.concat([pathways_IoOS.head(15), pathways_IoOS.tail(10)]).drop_duplicates().Pathway, data=reactions, ax=ax ) ax.set_xlabel('Mean Score for Outcomes') ax.set_ylabel('') ax.set_title('OoOS') sns.despine() # Pathway by sum score in each category pathways_IoOS = pd.DataFrame( reactions.groupby('Reaction').IoOS.mean() ).reset_index().sort_values(by='IoOS', ascending=False) pathways_IoOS.head() # Plotting top 15 and bottom 10 pathways sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(8, 12)) sns.barplot( y='Reaction', x='IoOS', order=pd.concat([pathways_IoOS.head(15), pathways_IoOS.tail(10)]).drop_duplicates().Reaction, data=reactions, ax=ax ) ax.set_xlabel('Mean Score for Initiation') ax.set_ylabel('') ax.set_title('IoOS') sns.despine() # Pathway by sum score in each category pathways_RoOS = pd.DataFrame( reactions.groupby('Reaction').RoOS.mean() ).reset_index().sort_values(by='RoOS', ascending=False) pathways_IoOS.head() # Plotting top 15 and bottom 10 pathways sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(8, 12)) sns.barplot( y='Reaction', x='RoOS', order=pd.concat([pathways_IoOS.head(15), pathways_IoOS.tail(10)]).drop_duplicates().Reaction, data=reactions, ax=ax ) ax.set_xlabel('Mean Score for Regulation') ax.set_ylabel('') ax.set_title('RoOS') sns.despine() # Pathway by sum score in each category pathways_OoOS = pd.DataFrame( reactions.groupby('Reaction').OoOS.mean() ).reset_index().sort_values(by='OoOS', ascending=False) # Plotting top 15 and bottom 10 pathways sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(8, 12)) sns.barplot( y='Reaction', x='OoOS', order=pd.concat([pathways_IoOS.head(15), pathways_IoOS.tail(10)]).drop_duplicates().Reaction, data=reactions, ax=ax ) ax.set_xlabel('Mean Score for Outcomes') ax.set_ylabel('') ax.set_title('OoOS') sns.despine() reactions[reactions.Drug.str.contains('warfarin')] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Drug Reaction Intermediate Node Intermediate Class Pathway IoOS OoOS RoOS 0 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer VKORC1 inhibitors [cytosol] DefinedSet Metabolism of vitamin K 0.077812 0.261603 0.164026 1 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer Warfarin traps human vitamin K epoxide reducta... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 2 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer Warfarin and vitamin K compete for binding to ... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 3 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer Pharmacogenetic-guided dosing of coumarin anti... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 4 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer [On the history of vitamin K, dicoumarol and w... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 5 warfarin [cytosol] Factor Xa inhibitors bind Va:Xa pulmonary embolism Disease Common Pathway of Fibrin Clot Formation 0.077812 0.261603 0.164026 6 warfarin [cytosol] Factor Xa inhibitors binds Xa pulmonary embolism Disease Common Pathway of Fibrin Clot Formation 0.077812 0.261603 0.164026 7 warfarin [cytosol] Factor IIa inhibitors (compounds) binds IIa pulmonary embolism Disease Intrinsic Pathway of Fibrin Clot Formation 0.077812 0.261603 0.164026 8 warfarin [cytosol] Factor IIa inhibitors (peptide) binds IIa pulmonary embolism Disease Intrinsic Pathway of Fibrin Clot Formation 0.077812 0.261603 0.164026 import sys sys.setrecursionlimit(100000) sns.set_context('talk', font_scale=1) sns.clustermap(reactions.groupby('Reaction')[['IoOS', 'RoOS', 'OoOS']].mean(), col_cluster=False, figsize=(4, 10)) sns.clustermap(reactions.groupby('Pathway')[['IoOS', 'RoOS', 'OoOS']].mean(), col_cluster=False, figsize=(4, 10)) seaborn.matrix.ClusterGrid at 0x127026908 Test Cypher Queries in custom neo4j driver implementation This section is not used for analysis. I am leaving it here to serve as an example of functions usable in the driver.py file reactome_driver.get_node_info( id_field= stId , id_val= R-ALL-9634956 , class_type='Drug', info_cols = ['displayName', 'name', 'isInDisease'] ) Query: MATCH (a:Drug {stId: $idnum}) RETURN a.displayName, a.name, a.isInDisease pyridostigmine [extracellular region] ['pyridostigmine'] True .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } displayName name isInDisease 0 pyridostigmine [extracellular region] [pyridostigmine] True reactome_driver.get_n_nodes_info( class_type='Drug', info_cols = ['displayName', 'name', 'isInDisease'], n=10 ) Query: MATCH (a:Drug) RETURN a.displayName, a.name, a.isInDisease LIMIT 10 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } displayName name isInDisease 0 trastuzumab [extracellular region] [trastuzumab, herceptin, D5v8, R-597] True 0 CP-724714 [cytosol] [CP-724714] True 0 Afatinib [cytosol] [Afatinib, BIBW2992, Irreversible TKI inhibito... True 0 AZ5104 [cytosol] [AZ5104] True 0 Sapitinib [cytosol] [Sapitinib] True 0 Tesevatinib [cytosol] [Tesevatinib, EXEL-7647, XL-647, KD-019, XL647] True 0 Lapatinib [cytosol] [Lapatinib, GW572016, Tykerb, Reversible tyros... True 0 Neratinib [cytosol] [Neratinib, HKI-272, afatinib, Irreversible ty... True 0 AEE788 [cytosol] [AEE788] True 0 Canertinib [cytosol] [Canertinib, CI-1033, Irreversible TKI inhibit... True","title":"Finding Common Pathways Used by Drugs"},{"location":"implementation/Explore_Drug_chemical_OxStress/Explore_Drug_chemical_OxStress/#caseolap-score-linking-drugs-to-reactome-pathways","text":"This notebook first tries to map drugs curated by Alex and David to entities in Reactome. Next these reactome entites are mapped to pathways and reactions. The caseolap score for drugs in a pathway are averaged and plotted. Samir Akre - December 2019 import neo4j_functions.driver as neo4j_driver import pandas as pd import importlib import progressbar import seaborn as sns import matplotlib.pyplot as plt","title":"CaseOLAP Score + Linking Drugs to Reactome Pathways"},{"location":"implementation/Explore_Drug_chemical_OxStress/Explore_Drug_chemical_OxStress/#importing-curated-lists-of-drugs-and-chemicals","text":"chemical_list_df = pd.read_csv('lib/oxidative_stress_chemicals_SA_10222019.csv') drug_list_df = pd.read_csv('lib/drug_list_SA_10222019.csv') chemical_list_df.head(n=2) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Biological Events of Oxidative Stress Molecular and Functional Categories Molecule/Enzyme/Protein MeSH Heading MeSH Supplementary MeSH tree numbers Chemical Formula Examples Pharm Actions Tree Numbers References 0 Initiation of Oxidative Reactive Oxygen Species (ROS) Superoxide (anion radical) Superoxides NaN D01.248.497.158.685.750.850; D01.339.431.374.8... O2- Superoxide, Hydrogen Peroxide Oxidants D27.720.642,\\nD27.888.569.540 PMID: 25547488 1 Initiation of Oxidative Reactive Oxygen Species (ROS) Hydrogen Peroxide Hydrogen Peroxide NaN D01.248.497.158.685.750.424; D01.339.431.374.4... H2O2 NaN Anti-Infective Agents, Local D27.505.954.122.187 NaN drug_list_df.head(n=2) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Drug Category # Name Synonyms MeSH Descriptor MeSH tree(s) Common adverse effects Dosage (freq/amount/time/delivery) Duration (time) Pharm Action ... Unnamed: 1015 Unnamed: 1016 Unnamed: 1017 Unnamed: 1018 Unnamed: 1019 Unnamed: 1020 Unnamed: 1021 Unnamed: 1022 Unnamed: 1023 Unnamed: 1024 0 Anticoagulants 1.0 heparin ['Calciparine', 'Eparina', 'heparina', 'Hepari... heparin D09.698.373.400 Thrombocytopenia, Cerebral haemorrhage, Haemog... 1/18U/kg/iv 2 days Anticoagulants, \\nFibrinolytic Agents ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 1 Anticoagulants 2.0 warfarin ['4-Hydroxy-3-(3-oxo-1-phenylbutyl)coumarin', ... warfarin D03.383.663.283.446.520.914\\nD03.633.100.150.4... Haemorrhage, Haematoma, anaemia, Epistaxis, hy... 1/2-10mg/day/po As needed Anticoagulants, \\nRodenticides ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 2 rows \u00d7 1025 columns","title":"Importing curated lists of drugs and chemicals"},{"location":"implementation/Explore_Drug_chemical_OxStress/Explore_Drug_chemical_OxStress/#looking-for-reactome-ids-of-drugs-in-curated-list","text":"Looks for the lower case name of the drug from the curated list to match any of the lowercase names a drug in reactome is listed in. Outputs pandas data frame under variable drugs_in_reactome 58/155 drugs found to have counter parts in reactome importlib.reload(neo4j_driver) reactome_driver = neo4j_driver.driver(uri = bolt://localhost:7687 , user = neo4j , password = Akre1234 )","title":"Looking for reactome ids of drugs in curated list"},{"location":"implementation/Explore_Drug_chemical_OxStress/Explore_Drug_chemical_OxStress/#test-to-see-if-i-can-find-any-drug-in-the-reactome-data-set","text":"reactome_driver.search_item_in_array( array_field= name , item=' herceptin ', class_type='Drug', info_cols = ['displayName', 'stId', 'isInDisease'], verbose=True ) Query: MATCH (a:Drug) WHERE toLower( herceptin ) IN [x in a.name | toLower(x)] RETURN a.displayName, a.stId, a.isInDisease .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } displayName stId isInDisease 0 trastuzumab [extracellular region] R-ALL-9634466 True","title":"Test to see if I can find any drug in the reactome data set"},{"location":"implementation/Explore_Drug_chemical_OxStress/Explore_Drug_chemical_OxStress/#querying-to-find-reactome-id-for-each-drug-in-curated-list","text":"TODO: Refine search criteria drugs_in_reactome = pd.DataFrame() for (drug_name, drug_cat), _ in drug_list_df.groupby(['Name', 'Drug Category']): result = reactome_driver.search_item_in_array( array_field= name , item=' %s ' % drug_name, class_type='Drug', info_cols = ['displayName', 'stId', 'isInDisease'] ) result['Name'] = drug_name result['drug_cat'] = drug_cat.strip() drugs_in_reactome = drugs_in_reactome.append(result) drugs_in_reactome.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } displayName stId isInDisease Name drug_cat 0 acebutolol [extracellular region] R-ALL-9610988 True acebutolol Beta Blockers 0 amlodipine [extracellular region] R-ALL-9614079 True amlodipine Calcium Antagonist 0 apixaban [extracellular region] R-ALL-9038732 True apixaban Thrombolytics 0 atenolol [extracellular region] R-ALL-9610989 True atenolol Beta Blockers 0 benazepril [endoplasmic reticulum lumen] R-ALL-9619005 True benazepril ACE Inhibitors print('Initial Drug List Size: ', drug_list_df.Name.nunique()) print('Drugs found in Reactome: ', drugs_in_reactome.Name.nunique()) Initial Drug List Size: 156 Drugs found in Reactome: 58 drugs_in_reactome.groupby('Name').drug_cat.unique() Name acebutolol [Beta Blockers] amlodipine [Calcium Antagonist] apixaban [Thrombolytics] atenolol [Beta Blockers] benazepril [ACE Inhibitors] betaxolol [Beta Blockers] candesartan [Angiotensin II Antagonists] cangrelor [Antiplatelets] captopril [ACE Inhibitors] carvedilol [Beta Blockers] clopidogrel [Antiplatelets] dabigatran [Thrombolytics] diltiazem [Calcium Antagonist, Calcium Channel Blockers] disopyramide [Na Channel Blockers] dobutamine [Inotropes] dofetilide [Potassium Channel Blockers] edoxaban [Thrombolytics] enalapril [ACE Inhibitors] enoximone [Phosphodiesterase Inhbitors] esmolol [Beta Blockers] felodipine [Calcium Antagonist] flecainide [Na Channel Blockers] fosinopril [ACE Inhibitors] ibutilide [Potassium Channel Blockers] irbesartan [Angiotensin II Antagonists] isoprenaline [Inotropes] isradipine [Calcium Antagonist] labetalol [Beta Blockers] lidocaine [Na Channel Blockers] lisinopril [ACE Inhibitors] losartan [Angiotensin II Antagonists] metoprolol [Beta Blockers] mexiletine [Na Channel Blockers] milrinone [Phosphodiesterase Inhbitors] nebivolol [Beta Blockers] nicardipine [Calcium Antagonist] nifedipine [Calcium Antagonist] nisoldipine [Calcium Antagonist] olmesartan [Angiotensin II Antagonists] perindopril [ACE Inhibitors] phenytoin [Na Channel Blockers] pindolol [Beta Blockers] prasugrel [Antiplatelets] procainamide [Na Channel Blockers] propafenone [Na Channel Blockers] propranolol [Beta Blockers] quinapril [ACE Inhibitors] quinidine [Na Channel Blockers] ramipril [ACE Inhibitors] rivaroxaban [Thrombolytics] sotalol [Beta Blockers, Potassium Channel Blockers] telmisartan [Angiotensin II Antagonists] ticagrelor [Antiplatelets] ticlopidine [Antiplatelets] tocainide [Na Channel Blockers] valsartan [Angiotensin II Antagonists] verapamil [Calcium Antagonist, Calcium Channel Blockers] warfarin [Anticoagulants] Name: drug_cat, dtype: object caseolap_results = pd.read_csv('lib/caseolap.csv') drugs_with_caseOLAP = drugs_in_reactome.merge( caseolap_results.rename(columns={'protein': 'Name'}), how='inner', validate='m:1' ).set_index('Name') print('Drugs found in caseOLAP and Reactome: ', drugs_with_caseOLAP.displayName.nunique()) drugs_with_caseOLAP.head() Drugs found in caseOLAP and Reactome: 58 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } displayName stId isInDisease drug_cat IoOS OoOS RoOS Name acebutolol acebutolol [extracellular region] R-ALL-9610988 True Beta Blockers 0.037757 0.070040 0.074837 amlodipine amlodipine [extracellular region] R-ALL-9614079 True Calcium Antagonist 0.184230 0.120305 0.138113 apixaban apixaban [extracellular region] R-ALL-9038732 True Thrombolytics 0.043904 0.069014 0.028798 atenolol atenolol [extracellular region] R-ALL-9610989 True Beta Blockers 0.166591 0.081671 0.139500 benazepril benazepril [endoplasmic reticulum lumen] R-ALL-9619005 True ACE Inhibitors 0.082279 0.062858 0.094923 import json drug_pal_dict = json.load(open('lib/drug_cat_palette.json', 'r')) chem_pal_dict = json.load(open('lib/chem_cat_palette.json', 'r')) print(chem_pal_dict) {'Initiation of Oxidative': [0.86, 0.3712, 0.33999999999999997], 'Outcomes of Oxidative Stress': [0.33999999999999997, 0.86, 0.3712], 'Regulation of Oxidative Stress': [0.3712, 0.33999999999999997, 0.86]} NOTE : Color of drug categories (label on far left) seems to be buggy. Propafenone should be white, but is not. Warfarin is white but should be blue. drugs_with_caseOLAP['color'] = drugs_with_caseOLAP.drug_cat.map(drug_pal_dict).fillna('white') clust = sns.clustermap( drugs_with_caseOLAP[['IoOS', 'OoOS', 'RoOS']].drop_duplicates(), figsize=(6,16), row_colors=drugs_with_caseOLAP['color'], col_colors=[chem_pal_dict[cat] for cat in ['Initiation of Oxidative', 'Outcomes of Oxidative Stress', 'Regulation of Oxidative Stress']] ) ax = clust.ax_heatmap y_lims = ax.get_ylim() ax.set_ylim([y_lims[0] + 0.5, y_lims[1] - .5]) (58.0, 0.0)","title":"Querying to find reactome ID for each drug in curated list"},{"location":"implementation/Explore_Drug_chemical_OxStress/Explore_Drug_chemical_OxStress/#looking-for-reactions-associated-with-each-drug-found-in-the-reactome-database","text":"Looks for 25 \"nearest\" pathways marked as Pathways to any drug within 1-3 nodes Outputs to pathways variable as a pandas dataframe Creates CSV output/drug_reactome_pathways_caseolap.csv # Re-initializing driver to account for changes made to driver function importlib.reload(neo4j_driver) driver = neo4j_driver.driver(uri = bolt://localhost:7687 , user = neo4j , password = Akre1234 ) # For each reactome drug ID, looks for closest pathways within 1-2 nodes reactions = pd.DataFrame() for (reactome_id, IoOS, OoOS, RoOS), d_df, in progressbar.progressbar(drugs_with_caseOLAP.groupby(['stId', 'IoOS', 'OoOS', 'RoOS'])): query = ( MATCH (a:Drug {stId: '%s'})-[]-(c)-[]-(b:ReactionLikeEvent) -[:hasEvent]-(p:Pathway) WHERE b.speciesName = 'Homo sapiens' AND NOT c.schemaClass IN ['Compartment', 'InstanceEdit'] RETURN DISTINCT a.displayName, b.displayName, c.displayName, c.schemaClass, p.displayName % (reactome_id) ) query_res = driver.run_query(query) result = driver.results_to_df(query_res, ['a.displayName', 'b.displayName', 'c.displayName', 'c.schemaClass', 'p.displayName']) result['IoOS'] = IoOS result['OoOS'] = OoOS result['RoOS'] = RoOS reactions = reactions.append(result, ignore_index=True, sort=False) reactions = reactions.rename( columns={ 'a.displayName': 'Drug', 'b.displayName': 'Reaction', 'c.displayName': 'Intermediate Node', 'c.schemaClass': 'Intermediate Class', 'p.displayName': 'Pathway' } ) reactions.to_csv('output/drug_reactome_reactions_caseolap.csv', index=False) reactions.head() 100% (58 of 58) |########################| Elapsed Time: 0:00:01 Time: 0:00:01 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Drug Reaction Intermediate Node Intermediate Class Pathway IoOS OoOS RoOS 0 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer VKORC1 inhibitors [cytosol] DefinedSet Metabolism of vitamin K 0.077812 0.261603 0.164026 1 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer Warfarin traps human vitamin K epoxide reducta... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 2 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer Warfarin and vitamin K compete for binding to ... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 3 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer Pharmacogenetic-guided dosing of coumarin anti... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 4 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer [On the history of vitamin K, dicoumarol and w... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 reactions = pd.read_csv('output/drug_reactome_reactions_caseolap.csv') print('Drugs remaining:', reactions.Drug.nunique()) pd.DataFrame(reactions.groupby('Pathway').Drug.nunique()).sort_values(by='Drug', ascending=False) Drugs remaining: 35 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Drug Pathway Adrenoceptors 11 Metabolism of Angiotensinogen to Angiotensins 8 Peptide ligand-binding receptors 6 Common Pathway of Fibrin Clot Formation 5 Intrinsic Pathway of Fibrin Clot Formation 5 P2Y receptors 5 Defective CYP1B1 causes Glaucoma 1 Metabolism of vitamin K 1 # Pathway by sum score in each category pathways_IoOS = pd.DataFrame( reactions.groupby('Pathway').IoOS.mean() ).reset_index().sort_values(by='IoOS', ascending=False) pathways_IoOS.head() # Plotting top 15 and bottom 10 pathways sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(8, 12)) sns.barplot( y='Pathway', x='IoOS', order=pd.concat([pathways_IoOS.head(15), pathways_IoOS.tail(10)]).drop_duplicates().Pathway, data=reactions, ax=ax ) ax.set_xlabel('Mean Score for Initiation') ax.set_ylabel('') ax.set_title('IoOS') sns.despine() # Pathway by sum score in each category pathways_RoOS = pd.DataFrame( reactions.groupby('Pathway').RoOS.mean() ).reset_index().sort_values(by='RoOS', ascending=False) pathways_IoOS.head() # Plotting top 15 and bottom 10 pathways sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(8, 12)) sns.barplot( y='Pathway', x='RoOS', order=pd.concat([pathways_IoOS.head(15), pathways_IoOS.tail(10)]).drop_duplicates().Pathway, data=reactions, ax=ax ) ax.set_xlabel('Mean Score for Regulation') ax.set_ylabel('') ax.set_title('RoOS') sns.despine() # Pathway by sum score in each category pathways_OoOS = pd.DataFrame( reactions.groupby('Pathway').OoOS.mean() ).reset_index().sort_values(by='OoOS', ascending=False) # Plotting top 15 and bottom 10 pathways sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(8, 12)) sns.barplot( y='Pathway', x='OoOS', order=pd.concat([pathways_IoOS.head(15), pathways_IoOS.tail(10)]).drop_duplicates().Pathway, data=reactions, ax=ax ) ax.set_xlabel('Mean Score for Outcomes') ax.set_ylabel('') ax.set_title('OoOS') sns.despine() # Pathway by sum score in each category pathways_IoOS = pd.DataFrame( reactions.groupby('Reaction').IoOS.mean() ).reset_index().sort_values(by='IoOS', ascending=False) pathways_IoOS.head() # Plotting top 15 and bottom 10 pathways sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(8, 12)) sns.barplot( y='Reaction', x='IoOS', order=pd.concat([pathways_IoOS.head(15), pathways_IoOS.tail(10)]).drop_duplicates().Reaction, data=reactions, ax=ax ) ax.set_xlabel('Mean Score for Initiation') ax.set_ylabel('') ax.set_title('IoOS') sns.despine() # Pathway by sum score in each category pathways_RoOS = pd.DataFrame( reactions.groupby('Reaction').RoOS.mean() ).reset_index().sort_values(by='RoOS', ascending=False) pathways_IoOS.head() # Plotting top 15 and bottom 10 pathways sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(8, 12)) sns.barplot( y='Reaction', x='RoOS', order=pd.concat([pathways_IoOS.head(15), pathways_IoOS.tail(10)]).drop_duplicates().Reaction, data=reactions, ax=ax ) ax.set_xlabel('Mean Score for Regulation') ax.set_ylabel('') ax.set_title('RoOS') sns.despine() # Pathway by sum score in each category pathways_OoOS = pd.DataFrame( reactions.groupby('Reaction').OoOS.mean() ).reset_index().sort_values(by='OoOS', ascending=False) # Plotting top 15 and bottom 10 pathways sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(8, 12)) sns.barplot( y='Reaction', x='OoOS', order=pd.concat([pathways_IoOS.head(15), pathways_IoOS.tail(10)]).drop_duplicates().Reaction, data=reactions, ax=ax ) ax.set_xlabel('Mean Score for Outcomes') ax.set_ylabel('') ax.set_title('OoOS') sns.despine() reactions[reactions.Drug.str.contains('warfarin')] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Drug Reaction Intermediate Node Intermediate Class Pathway IoOS OoOS RoOS 0 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer VKORC1 inhibitors [cytosol] DefinedSet Metabolism of vitamin K 0.077812 0.261603 0.164026 1 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer Warfarin traps human vitamin K epoxide reducta... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 2 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer Warfarin and vitamin K compete for binding to ... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 3 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer Pharmacogenetic-guided dosing of coumarin anti... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 4 warfarin [cytosol] VKORC1 inhibitors binds VKORC1 dimer [On the history of vitamin K, dicoumarol and w... LiteratureReference Metabolism of vitamin K 0.077812 0.261603 0.164026 5 warfarin [cytosol] Factor Xa inhibitors bind Va:Xa pulmonary embolism Disease Common Pathway of Fibrin Clot Formation 0.077812 0.261603 0.164026 6 warfarin [cytosol] Factor Xa inhibitors binds Xa pulmonary embolism Disease Common Pathway of Fibrin Clot Formation 0.077812 0.261603 0.164026 7 warfarin [cytosol] Factor IIa inhibitors (compounds) binds IIa pulmonary embolism Disease Intrinsic Pathway of Fibrin Clot Formation 0.077812 0.261603 0.164026 8 warfarin [cytosol] Factor IIa inhibitors (peptide) binds IIa pulmonary embolism Disease Intrinsic Pathway of Fibrin Clot Formation 0.077812 0.261603 0.164026 import sys sys.setrecursionlimit(100000) sns.set_context('talk', font_scale=1) sns.clustermap(reactions.groupby('Reaction')[['IoOS', 'RoOS', 'OoOS']].mean(), col_cluster=False, figsize=(4, 10)) sns.clustermap(reactions.groupby('Pathway')[['IoOS', 'RoOS', 'OoOS']].mean(), col_cluster=False, figsize=(4, 10)) seaborn.matrix.ClusterGrid at 0x127026908","title":"Looking for reactions associated with each drug found in the Reactome database"},{"location":"implementation/Explore_Drug_chemical_OxStress/Explore_Drug_chemical_OxStress/#test-cypher-queries-in-custom-neo4j-driver-implementation","text":"This section is not used for analysis. I am leaving it here to serve as an example of functions usable in the driver.py file reactome_driver.get_node_info( id_field= stId , id_val= R-ALL-9634956 , class_type='Drug', info_cols = ['displayName', 'name', 'isInDisease'] ) Query: MATCH (a:Drug {stId: $idnum}) RETURN a.displayName, a.name, a.isInDisease pyridostigmine [extracellular region] ['pyridostigmine'] True .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } displayName name isInDisease 0 pyridostigmine [extracellular region] [pyridostigmine] True reactome_driver.get_n_nodes_info( class_type='Drug', info_cols = ['displayName', 'name', 'isInDisease'], n=10 ) Query: MATCH (a:Drug) RETURN a.displayName, a.name, a.isInDisease LIMIT 10 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } displayName name isInDisease 0 trastuzumab [extracellular region] [trastuzumab, herceptin, D5v8, R-597] True 0 CP-724714 [cytosol] [CP-724714] True 0 Afatinib [cytosol] [Afatinib, BIBW2992, Irreversible TKI inhibito... True 0 AZ5104 [cytosol] [AZ5104] True 0 Sapitinib [cytosol] [Sapitinib] True 0 Tesevatinib [cytosol] [Tesevatinib, EXEL-7647, XL-647, KD-019, XL647] True 0 Lapatinib [cytosol] [Lapatinib, GW572016, Tykerb, Reversible tyros... True 0 Neratinib [cytosol] [Neratinib, HKI-272, afatinib, Irreversible ty... True 0 AEE788 [cytosol] [AEE788] True 0 Canertinib [cytosol] [Canertinib, CI-1033, Irreversible TKI inhibit... True","title":"Test Cypher Queries in custom neo4j driver implementation"},{"location":"implementation/Occurrence_Count_Plots/Occurrence_Count_Plots/","text":"Creates Plots to visualize Occurrences of Oxidative Stress Markers and Drugs in PubMED Figures here are based on data from the chemical_drug_elastic_occurance.ipynb notebook which scans the elastic search indexed pubmed abstracts for markers and drugs. import seaborn as sns import matplotlib.pyplot as plt import pandas as pd Plotting Drug Occurrences over time drugs = pd.read_csv('output/Drug_PMID_occurances.csv') By Category - Cumulative pmid_drug_cat = pd.DataFrame(drugs.groupby('category').PMID.nunique()).reset_index() _, ax =plt.subplots(figsize=(8,10)) ax.set_xscale('log') sns.set_context('poster', font_scale=1) sns.barplot( x='PMID', y='category', data=pmid_drug_cat.sort_values(by='PMID', ascending=False), palette='Blues_d' ) ax.set_xlabel('Unique PMIDs') ax.set_ylabel('') ax.set_title('PMIDs per Drug Category'); sns.despine() Each drug plotted by Category - Cumulative cats_of_interest = [ 'Beta Blockers', 'Vasodilators', 'Thrombolytics', 'Inotropes', 'ACE Inhibitors', 'Diuretics' ] cols=3 rows=2 sns.set_context('talk', font_scale=1) fig, axes = plt.subplots(nrows=rows, ncols=cols, figsize=(20,12), sharex=True) fig.subplots_adjust(wspace=.7) drugs[drugs.category == 'Diuretics'].groupby('drug').PMID.nunique() for i in range(len(cats_of_interest)): ax = axes.flatten()[i] ax.set_xscale('log') cat_pmid = pd.DataFrame(drugs[drugs.category == cats_of_interest[i]].groupby('drug').PMID.nunique()).reset_index() sns.barplot( x='PMID', y='drug', data=cat_pmid.sort_values(by='PMID', ascending=False), palette='Blues_d', ax=ax, ) ax.set_xlabel('') ax.set_ylabel('') ax.set_title(cats_of_interest[i]) sns.despine() Each drug plotted by Category - Over time cats_of_interest = [ 'Beta Blockers', 'Vasodilators', 'Thrombolytics', 'Inotropes', 'ACE Inhibitors', 'Diuretics' ] cols=3 rows=2 sns.set_context('talk', font_scale=1) fig, axes = plt.subplots(nrows=rows, ncols=cols, figsize=(20,12)) fig.subplots_adjust(wspace=.7) drugs[drugs.category == 'Diuretics'].groupby('drug').PMID.nunique() for i in range(len(cats_of_interest)): ax = axes.flatten()[i] cat_pmid = pd.DataFrame(drugs[drugs.category == cats_of_interest[i]].groupby(['drug', 'Year']).PMID.nunique()).reset_index() sns.lineplot( x='Year', y='PMID', hue='drug', data=cat_pmid, ax=ax, ) # Shrink current axis by 20% box = ax.get_position() ax.set_position([box.x0, box.y0, box.width * 0.8, box.height]) xlims = ax.get_xlim() ax.set_xlim([1950,xlims[1]]) ax.vlines([2019], ymax=ax.get_ylim()[1], ymin=0, linestyle='dashed', alpha=0.9) # Put a legend to the right of the current axis ax.legend(loc='center left', frameon=False, fontsize=15, bbox_to_anchor=(1, 0.5)) ax.set_xlabel('') ax.set_ylabel('') ax.set_title(cats_of_interest[i]) sns.despine() Plotting occurances over time for each category. Done as a stackplot and a lineplot pubs_per_year = pd.DataFrame(drugs.groupby(['Year', 'category']).PMID.nunique()).reset_index() ppy_piv = pubs_per_year.pivot_table( columns='category', index='Year', values='PMID', fill_value=0 ) ax = ppy_piv.plot.area(figsize=(16,8), colormap='tab20') # Shrink current axis by 20% box = ax.get_position() ax.set_position([box.x0, box.y0, box.width * 0.8, box.height]) # Put a legend to the right of the current axis ax.legend(loc='center left', bbox_to_anchor=(1, 0.5)) ax.set_title('Drug Category PMID Occurances by Year') sns.despine() drug_pal = sns.color_palette( tab20c , n_colors=drugs.category.nunique()) drug_pal[-6:] = sns.color_palette( tab20b , n_colors=12)[:6] drug_order = pubs_per_year.sort_values(by='PMID').category.unique() drug_pal_dict = dict(zip(drug_order, drug_pal)) sns.palplot(drug_pal) plt.gca().set_xticklabels(drug_order) plt.xticks(rotation=90); fig, ax = plt.subplots(figsize=(16,8)) #ax.set_yscale('log') sns.lineplot( x='Year', y='PMID', hue='category', data=pubs_per_year, palette=drug_pal_dict, ax=ax ) # Shrink current axis by 20% box = ax.get_position() ax.set_position([box.x0, box.y0, box.width * 0.8, box.height]) # Put a legend to the right of the current axis ax.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=15) ax.set_title('Drug Category PMID Occurances per Year') xlims = ax.get_xlim() ax.set_xlim([1950,xlims[1]]) ax.vlines([2019], ymax=45000, ymin=0, linestyle='dashed', alpha=0.9) ax.set_ylabel('Unique PMIDs') sns.despine() Markers of Oxidative Stress Occurrence Plotting chems = pd.read_csv('output/Chemical_PMID_occurances.csv') pmid_chem_cat = pd.DataFrame(chems.groupby('category').PMID.nunique()).reset_index() _, ax =plt.subplots(figsize=(8,10)) ax.set_xscale('log') sns.set_context('poster', font_scale=1) sns.barplot( x='PMID', y='category', data=pmid_chem_cat.sort_values(by='PMID', ascending=False), palette='Blues_d' ) ax.set_xlabel('Unique PMIDs') ax.set_ylabel('') ax.set_title('PMIDs per Chemical Category'); sns.despine(); fig, ax = plt.subplots(figsize=(16,8)) pubs_per_year = pd.DataFrame(chems.groupby(['Year', 'category']).PMID.nunique()).reset_index() sns.lineplot( x='Year', y='PMID', hue='category', data=pubs_per_year, ax=ax ) # Shrink current axis by 20% box = ax.get_position() ax.set_position([box.x0, box.y0, box.width * 0.8, box.height]) # Put a legend to the right of the current axis ax.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=15) ax.set_title('Chemical Category PMID Occurances by Year') xlims = ax.get_xlim() ax.set_xlim([1950,xlims[1]]) ax.vlines([2019], ymax=45000, ymin=0, linestyle='dashed', alpha=0.9) sns.despine() Chem Drug Co-Occurance Plots pair_occur = pd.read_csv('output/chem_drug_pair_matches.csv') top_pair = pd.DataFrame(pair_occur.groupby(['drug', 'chemical']).PMID.nunique()).reset_index() top_pair = top_pair.sort_values(by='PMID', ascending=False) top_pair.head(n=20) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } drug chemical PMID 1687 nitric oxide nitric oxide 129616 1766 nitroprusside nitric oxide 6429 1686 nitric oxide nadph 4496 1692 nitric oxide peroxynitrite 3955 1226 insulin nitric oxide 3926 1653 nitric oxide catalase 3161 67 adenosine nitric oxide 2985 1672 nitric oxide hydrogen peroxide 2292 1678 nitric oxide malondialdehyde (mda) 2122 1654 nitric oxide cysteine 2093 1810 norepinephrine nitric oxide 1611 1661 nitric oxide glutathione (gsh) 1535 790 dopamine nitric oxide 1299 1194 insulin cysteine 1248 1193 insulin catalase 1116 63 adenosine nad+ 1099 761 dopamine ascorbic acid 1047 2119 sildenafil nitric oxide 1041 1728 nitroglycerin nitric oxide 1038 300 atropine nitric oxide 1031 not_nos = top_pair[ ~((top_pair.drug == 'nitric oxide') | (top_pair.chemical == 'nitric oxide')) ] not_nos.head(n=10) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } drug chemical PMID 1194 insulin cysteine 1248 1193 insulin catalase 1116 63 adenosine nad+ 1099 761 dopamine ascorbic acid 1047 1209 insulin homocysteine 915 1225 insulin nadph 835 1222 insulin nad+ 802 1234 insulin selenium 703 41 adenosine cysteine 648 784 dopamine melatonin 619 fig, ax = plt.subplots(figsize=(16,8)) sns.set_context('poster', font_scale=1) n=10 filt_top = pair_occur.merge( not_nos[['drug','chemical']].head(n=n) ) filt_top = filt_top.assign(chem_drug=filt_top.drug.map(str) + '-' + filt_top.chemical) filt_top_count = pd.DataFrame( filt_top.groupby(['chem_drug', 'Year']).PMID.nunique() ).reset_index() sns.lineplot( data=filt_top_count, x='Year', y='PMID', hue='chem_drug', ax=ax ) box = ax.get_position() ax.set_position([box.x0, box.y0, box.width * 0.8, box.height]) # Put a legend to the right of the current axis ax.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=15) ax.set_title('Chemical Drug Co-occurrence') xlims = ax.get_xlim() ax.set_xlim([1950,xlims[1]]) ax.vlines([2019], ymax=ax.get_ylim()[1], ymin=0, linestyle='dashed', alpha=0.9) sns.despine(); fig, ax = plt.subplots(figsize=(16,8)) n=10 filt_top = pair_occur.merge( top_pair[['drug','chemical']].head(n=n) ) filt_top = filt_top.assign(chem_drug=filt_top.drug.map(str) + '-' + filt_top.chemical) filt_top_count = pd.DataFrame( filt_top.groupby(['chem_drug', 'Year']).PMID.nunique() ).reset_index() ax.set_yscale('symlog') sns.lineplot( data=filt_top_count, x='Year', y='PMID', hue='chem_drug', ax=ax ) box = ax.get_position() ax.set_position([box.x0, box.y0, box.width * 0.8, box.height]) # Put a legend to the right of the current axis ax.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=15) ax.set_title('Chemical Drug Co-occurrence') xlims = ax.get_xlim() ax.set_xlim([1950,xlims[1]]) ax.vlines([2019], ymax=ax.get_ylim()[1], ymin=0, linestyle='dashed', alpha=0.9) sns.despine();","title":"Visualizing Distribution of Data in Pubmed"},{"location":"implementation/Occurrence_Count_Plots/Occurrence_Count_Plots/#creates-plots-to-visualize-occurrences-of-oxidative-stress-markers-and-drugs-in-pubmed","text":"Figures here are based on data from the chemical_drug_elastic_occurance.ipynb notebook which scans the elastic search indexed pubmed abstracts for markers and drugs. import seaborn as sns import matplotlib.pyplot as plt import pandas as pd","title":"Creates Plots to visualize Occurrences of Oxidative Stress Markers and Drugs in PubMED"},{"location":"implementation/Occurrence_Count_Plots/Occurrence_Count_Plots/#plotting-drug-occurrences-over-time","text":"drugs = pd.read_csv('output/Drug_PMID_occurances.csv')","title":"Plotting Drug Occurrences over time"},{"location":"implementation/Occurrence_Count_Plots/Occurrence_Count_Plots/#by-category-cumulative","text":"pmid_drug_cat = pd.DataFrame(drugs.groupby('category').PMID.nunique()).reset_index() _, ax =plt.subplots(figsize=(8,10)) ax.set_xscale('log') sns.set_context('poster', font_scale=1) sns.barplot( x='PMID', y='category', data=pmid_drug_cat.sort_values(by='PMID', ascending=False), palette='Blues_d' ) ax.set_xlabel('Unique PMIDs') ax.set_ylabel('') ax.set_title('PMIDs per Drug Category'); sns.despine()","title":"By Category - Cumulative"},{"location":"implementation/Occurrence_Count_Plots/Occurrence_Count_Plots/#each-drug-plotted-by-category-cumulative","text":"cats_of_interest = [ 'Beta Blockers', 'Vasodilators', 'Thrombolytics', 'Inotropes', 'ACE Inhibitors', 'Diuretics' ] cols=3 rows=2 sns.set_context('talk', font_scale=1) fig, axes = plt.subplots(nrows=rows, ncols=cols, figsize=(20,12), sharex=True) fig.subplots_adjust(wspace=.7) drugs[drugs.category == 'Diuretics'].groupby('drug').PMID.nunique() for i in range(len(cats_of_interest)): ax = axes.flatten()[i] ax.set_xscale('log') cat_pmid = pd.DataFrame(drugs[drugs.category == cats_of_interest[i]].groupby('drug').PMID.nunique()).reset_index() sns.barplot( x='PMID', y='drug', data=cat_pmid.sort_values(by='PMID', ascending=False), palette='Blues_d', ax=ax, ) ax.set_xlabel('') ax.set_ylabel('') ax.set_title(cats_of_interest[i]) sns.despine()","title":"Each drug plotted by Category - Cumulative"},{"location":"implementation/Occurrence_Count_Plots/Occurrence_Count_Plots/#each-drug-plotted-by-category-over-time","text":"cats_of_interest = [ 'Beta Blockers', 'Vasodilators', 'Thrombolytics', 'Inotropes', 'ACE Inhibitors', 'Diuretics' ] cols=3 rows=2 sns.set_context('talk', font_scale=1) fig, axes = plt.subplots(nrows=rows, ncols=cols, figsize=(20,12)) fig.subplots_adjust(wspace=.7) drugs[drugs.category == 'Diuretics'].groupby('drug').PMID.nunique() for i in range(len(cats_of_interest)): ax = axes.flatten()[i] cat_pmid = pd.DataFrame(drugs[drugs.category == cats_of_interest[i]].groupby(['drug', 'Year']).PMID.nunique()).reset_index() sns.lineplot( x='Year', y='PMID', hue='drug', data=cat_pmid, ax=ax, ) # Shrink current axis by 20% box = ax.get_position() ax.set_position([box.x0, box.y0, box.width * 0.8, box.height]) xlims = ax.get_xlim() ax.set_xlim([1950,xlims[1]]) ax.vlines([2019], ymax=ax.get_ylim()[1], ymin=0, linestyle='dashed', alpha=0.9) # Put a legend to the right of the current axis ax.legend(loc='center left', frameon=False, fontsize=15, bbox_to_anchor=(1, 0.5)) ax.set_xlabel('') ax.set_ylabel('') ax.set_title(cats_of_interest[i]) sns.despine()","title":"Each drug plotted by Category - Over time"},{"location":"implementation/Occurrence_Count_Plots/Occurrence_Count_Plots/#plotting-occurances-over-time-for-each-category-done-as-a-stackplot-and-a-lineplot","text":"pubs_per_year = pd.DataFrame(drugs.groupby(['Year', 'category']).PMID.nunique()).reset_index() ppy_piv = pubs_per_year.pivot_table( columns='category', index='Year', values='PMID', fill_value=0 ) ax = ppy_piv.plot.area(figsize=(16,8), colormap='tab20') # Shrink current axis by 20% box = ax.get_position() ax.set_position([box.x0, box.y0, box.width * 0.8, box.height]) # Put a legend to the right of the current axis ax.legend(loc='center left', bbox_to_anchor=(1, 0.5)) ax.set_title('Drug Category PMID Occurances by Year') sns.despine() drug_pal = sns.color_palette( tab20c , n_colors=drugs.category.nunique()) drug_pal[-6:] = sns.color_palette( tab20b , n_colors=12)[:6] drug_order = pubs_per_year.sort_values(by='PMID').category.unique() drug_pal_dict = dict(zip(drug_order, drug_pal)) sns.palplot(drug_pal) plt.gca().set_xticklabels(drug_order) plt.xticks(rotation=90); fig, ax = plt.subplots(figsize=(16,8)) #ax.set_yscale('log') sns.lineplot( x='Year', y='PMID', hue='category', data=pubs_per_year, palette=drug_pal_dict, ax=ax ) # Shrink current axis by 20% box = ax.get_position() ax.set_position([box.x0, box.y0, box.width * 0.8, box.height]) # Put a legend to the right of the current axis ax.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=15) ax.set_title('Drug Category PMID Occurances per Year') xlims = ax.get_xlim() ax.set_xlim([1950,xlims[1]]) ax.vlines([2019], ymax=45000, ymin=0, linestyle='dashed', alpha=0.9) ax.set_ylabel('Unique PMIDs') sns.despine()","title":"Plotting occurances over time for each category. Done as a stackplot and a lineplot"},{"location":"implementation/Occurrence_Count_Plots/Occurrence_Count_Plots/#markers-of-oxidative-stress-occurrence-plotting","text":"chems = pd.read_csv('output/Chemical_PMID_occurances.csv') pmid_chem_cat = pd.DataFrame(chems.groupby('category').PMID.nunique()).reset_index() _, ax =plt.subplots(figsize=(8,10)) ax.set_xscale('log') sns.set_context('poster', font_scale=1) sns.barplot( x='PMID', y='category', data=pmid_chem_cat.sort_values(by='PMID', ascending=False), palette='Blues_d' ) ax.set_xlabel('Unique PMIDs') ax.set_ylabel('') ax.set_title('PMIDs per Chemical Category'); sns.despine(); fig, ax = plt.subplots(figsize=(16,8)) pubs_per_year = pd.DataFrame(chems.groupby(['Year', 'category']).PMID.nunique()).reset_index() sns.lineplot( x='Year', y='PMID', hue='category', data=pubs_per_year, ax=ax ) # Shrink current axis by 20% box = ax.get_position() ax.set_position([box.x0, box.y0, box.width * 0.8, box.height]) # Put a legend to the right of the current axis ax.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=15) ax.set_title('Chemical Category PMID Occurances by Year') xlims = ax.get_xlim() ax.set_xlim([1950,xlims[1]]) ax.vlines([2019], ymax=45000, ymin=0, linestyle='dashed', alpha=0.9) sns.despine()","title":"Markers of Oxidative Stress Occurrence Plotting"},{"location":"implementation/Occurrence_Count_Plots/Occurrence_Count_Plots/#chem-drug-co-occurance-plots","text":"pair_occur = pd.read_csv('output/chem_drug_pair_matches.csv') top_pair = pd.DataFrame(pair_occur.groupby(['drug', 'chemical']).PMID.nunique()).reset_index() top_pair = top_pair.sort_values(by='PMID', ascending=False) top_pair.head(n=20) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } drug chemical PMID 1687 nitric oxide nitric oxide 129616 1766 nitroprusside nitric oxide 6429 1686 nitric oxide nadph 4496 1692 nitric oxide peroxynitrite 3955 1226 insulin nitric oxide 3926 1653 nitric oxide catalase 3161 67 adenosine nitric oxide 2985 1672 nitric oxide hydrogen peroxide 2292 1678 nitric oxide malondialdehyde (mda) 2122 1654 nitric oxide cysteine 2093 1810 norepinephrine nitric oxide 1611 1661 nitric oxide glutathione (gsh) 1535 790 dopamine nitric oxide 1299 1194 insulin cysteine 1248 1193 insulin catalase 1116 63 adenosine nad+ 1099 761 dopamine ascorbic acid 1047 2119 sildenafil nitric oxide 1041 1728 nitroglycerin nitric oxide 1038 300 atropine nitric oxide 1031 not_nos = top_pair[ ~((top_pair.drug == 'nitric oxide') | (top_pair.chemical == 'nitric oxide')) ] not_nos.head(n=10) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } drug chemical PMID 1194 insulin cysteine 1248 1193 insulin catalase 1116 63 adenosine nad+ 1099 761 dopamine ascorbic acid 1047 1209 insulin homocysteine 915 1225 insulin nadph 835 1222 insulin nad+ 802 1234 insulin selenium 703 41 adenosine cysteine 648 784 dopamine melatonin 619 fig, ax = plt.subplots(figsize=(16,8)) sns.set_context('poster', font_scale=1) n=10 filt_top = pair_occur.merge( not_nos[['drug','chemical']].head(n=n) ) filt_top = filt_top.assign(chem_drug=filt_top.drug.map(str) + '-' + filt_top.chemical) filt_top_count = pd.DataFrame( filt_top.groupby(['chem_drug', 'Year']).PMID.nunique() ).reset_index() sns.lineplot( data=filt_top_count, x='Year', y='PMID', hue='chem_drug', ax=ax ) box = ax.get_position() ax.set_position([box.x0, box.y0, box.width * 0.8, box.height]) # Put a legend to the right of the current axis ax.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=15) ax.set_title('Chemical Drug Co-occurrence') xlims = ax.get_xlim() ax.set_xlim([1950,xlims[1]]) ax.vlines([2019], ymax=ax.get_ylim()[1], ymin=0, linestyle='dashed', alpha=0.9) sns.despine(); fig, ax = plt.subplots(figsize=(16,8)) n=10 filt_top = pair_occur.merge( top_pair[['drug','chemical']].head(n=n) ) filt_top = filt_top.assign(chem_drug=filt_top.drug.map(str) + '-' + filt_top.chemical) filt_top_count = pd.DataFrame( filt_top.groupby(['chem_drug', 'Year']).PMID.nunique() ).reset_index() ax.set_yscale('symlog') sns.lineplot( data=filt_top_count, x='Year', y='PMID', hue='chem_drug', ax=ax ) box = ax.get_position() ax.set_position([box.x0, box.y0, box.width * 0.8, box.height]) # Put a legend to the right of the current axis ax.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=15) ax.set_title('Chemical Drug Co-occurrence') xlims = ax.get_xlim() ax.set_xlim([1950,xlims[1]]) ax.vlines([2019], ymax=ax.get_ylim()[1], ymin=0, linestyle='dashed', alpha=0.9) sns.despine();","title":"Chem Drug Co-Occurance Plots"},{"location":"implementation/chemical_drug_elastic_occurance/chemical_drug_elastic_occurance/","text":"Finding Occurrences of Chemicals and Drugs in PubMed Abstracts Searches the ElasticSearch index created during CaseOLAP pipeline run for curated list of Drugs and Chemicals related to oxidative stress Output: Chemical_PMID_occurances.csv : CSV table where each row is the occurance of a chemical in PubMed Drug_PMID_occurances.csv : CSV table where each row is the occurance of a drug in PubMed from elasticsearch import Elasticsearch from elasticsearch_dsl import Search, Q import pandas as pd from itertools import product import seaborn as sns import numpy as np import time import matplotlib.pyplot as plt import json import progressbar Load Drug and Chemical lists, initialize Elastic Search Requires elastic search engine to be running on cluster. Must have PMID index chemical_list_df = pd.read_csv('input/oxidative_stress_chemicals_SA_10222019.csv') chemical_list_df['Molecule/Enzyme/Protein'] = chemical_list_df['Molecule/Enzyme/Protein'].str.lower().str.strip() chemical_list_df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Biological Events of Oxidative Stress Molecular and Functional Categories Molecule/Enzyme/Protein MeSH Heading MeSH Supplementary MeSH tree numbers Chemical Formula Examples Pharm Actions Tree Numbers References 0 Initiation of Oxidative Reactive Oxygen Species (ROS) superoxide (anion radical) Superoxides NaN D01.248.497.158.685.750.850; D01.339.431.374.8... O2- Superoxide, Hydrogen Peroxide Oxidants D27.720.642,\\nD27.888.569.540 PMID: 25547488 1 Initiation of Oxidative Reactive Oxygen Species (ROS) hydrogen peroxide Hydrogen Peroxide NaN D01.248.497.158.685.750.424; D01.339.431.374.4... H2O2 NaN Anti-Infective Agents, Local D27.505.954.122.187 NaN 2 Initiation of Oxidative Reactive Oxygen Species (ROS) NaN NaN NaN NaN NaN NaN Oxidants D27.720.642,\\nD27.888.569.540 NaN 3 Initiation of Oxidative Reactive Oxygen Species (ROS) hydroxyl (radical) Hydroxyl Radical NaN D01.339.431.249; D01.248.497.158.459.300; D01.... HO NaN Oxidants D27.720.642,\\nD27.888.569.540 NaN 4 Initiation of Oxidative Reactive Oxygen Species (ROS) alpha oxygen None listed NaN NaN NaN NaN NaN NaN NaN drug_list_df = pd.read_csv('input/drug_list_SA_10222019.csv') drug_list_df['Name'] = drug_list_df['Name'].str.lower().str.strip() drug_list_df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Drug Category # Name Synonyms MeSH Descriptor MeSH tree(s) Common adverse effects Dosage (freq/amount/time/delivery) Duration (time) Pharm Action ... Unnamed: 1015 Unnamed: 1016 Unnamed: 1017 Unnamed: 1018 Unnamed: 1019 Unnamed: 1020 Unnamed: 1021 Unnamed: 1022 Unnamed: 1023 Unnamed: 1024 0 Anticoagulants 1.0 heparin ['Calciparine', 'Eparina', 'heparina', 'Hepari... heparin D09.698.373.400 Thrombocytopenia, Cerebral haemorrhage, Haemog... 1/18U/kg/iv 2 days Anticoagulants, \\nFibrinolytic Agents ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 1 Anticoagulants 2.0 warfarin ['4-Hydroxy-3-(3-oxo-1-phenylbutyl)coumarin', ... warfarin D03.383.663.283.446.520.914\\nD03.633.100.150.4... Haemorrhage, Haematoma, anaemia, Epistaxis, hy... 1/2-10mg/day/po As needed Anticoagulants, \\nRodenticides ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 2 Thrombolytics 3.0 streptokinase ['Streptokinase C precursor'] streptokinase D08.811.277.656.300.775\\nD12.776.124.125.662.537 blurred vision, confusion, dizziness, fever, s... 1/1,500,000 IU/iv 60min Fibrinolytic Agents ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 3 Thrombolytics 4.0 urokinase ['U-plasminogen activator', 'uPA', 'Urokinase-... Urokinase-Type Plasminogen Activator D08.811.277.656.300.760.910\\nD08.811.277.656.9... bleeding gums, coughing up blood, dizziness, h... 1/4,000,000U/iv 10min NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 4 Thrombolytics 5.0 tpa ['Alteplasa', 'Alteplase (genetical recombinat... Tissue Plasminogen Activator D08.811.277.656.300.760.875\\nD08.811.277.656.9... NaN 1/0.9mg/kg/iv 60min Fibrinolytic Agents ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 5 rows \u00d7 1025 columns es = Elasticsearch(timeout=300) Find PMIDs associated with every combination of drugs and chemicals via elastic search output file saved to output/chem_drug_pair_matches.csv # All combinations of drugs and chemicals drug_chemicals = product( drug_list_df['Name'].dropna().unique(), chemical_list_df['Molecule/Enzyme/Protein'].dropna().unique() ) matches = pd.DataFrame() for (drug, chemical) in progressbar.progressbar(drug_chemicals): mol_matches = { 'PMID': [], 'title': [], 'Year': [], 'Month': [] } # Match drug and chemical q = Q( match_phrase , abstract=drug.lower().strip()) Q( match_phrase , abstract=chemical.lower().strip()) # Search hits = Search( using=es, index= pubmed ).params( request_timeout=300 ).query(q) for h in hits.scan(): date_dict = json.loads(h.date.replace( ' , ' ')) mol_matches['PMID'].append(h.pmid) mol_matches['title'].append(h.title) mol_matches['Year'].append(date_dict['Year']) mol_matches['Month'].append(date_dict['Month']) match_df = pd.DataFrame.from_dict(mol_matches) match_df['drug'] = drug.lower().strip() match_df['chemical'] = chemical.lower().strip() matches = matches.append(match_df) matches.head() | | # | 21059 Elapsed Time: 0:13:02 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PMID title Year Month drug chemical 0 8376590 Homocysteine, a thrombogenic agent, suppresses... 1993 Sep heparin hydrogen peroxide 1 25037421 Degradation of fucoidans from Sargassum fulvel... 2014 Oct heparin hydrogen peroxide 2 14561655 Role of hydrogen peroxide in sperm capacitatio... 2004 Feb heparin hydrogen peroxide 3 9040037 Protective effect of dextran sulfate and hepar... 1997 Jan heparin hydrogen peroxide 4 10547607 Heparin-binding EGF-like growth factor is expr... 1999 Nov heparin hydrogen peroxide matches.to_csv('output/chem_drug_pair_matches.csv', index=False) matches = pd.read_csv('output/chem_drug_pair_matches.csv') Plotting Drug, chemical co-occurence heatmap colors used to show category of drug, and oxidative stress category association of chemicals chem_name_cats = chemical_list_df[['Molecule/Enzyme/Protein', 'Biological Events of Oxidative Stress']]\\ .drop_duplicates().rename(columns={ 'Molecule/Enzyme/Protein': 'chemical', 'Biological Events of Oxidative Stress':'chem_cat' }).dropna() drug_name_cats = drug_list_df[['Name', 'Drug Category']]\\ .drop_duplicates().rename(columns={ 'Name': 'drug', 'Drug Category': 'drug_cat' }).dropna() with_cats_matches = matches.merge( chem_name_cats, how='left', validate='m:m' ) with_cats_matches = with_cats_matches.merge( drug_name_cats, how='left', validate='m:m' ) print(matches.dropna().shape, with_cats_matches.dropna().shape) with_cats_matches.head() (199479, 6) (204265, 8) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PMID title Year Month drug chemical chem_cat drug_cat 0 8376590 Homocysteine, a thrombogenic agent, suppresses... 1993.0 Sep heparin hydrogen peroxide Initiation of Oxidative Anticoagulants 1 25037421 Degradation of fucoidans from Sargassum fulvel... 2014.0 Oct heparin hydrogen peroxide Initiation of Oxidative Anticoagulants 2 14561655 Role of hydrogen peroxide in sperm capacitatio... 2004.0 Feb heparin hydrogen peroxide Initiation of Oxidative Anticoagulants 3 9040037 Protective effect of dextran sulfate and hepar... 1997.0 Jan heparin hydrogen peroxide Initiation of Oxidative Anticoagulants 4 10547607 Heparin-binding EGF-like growth factor is expr... 1999.0 Nov heparin hydrogen peroxide Initiation of Oxidative Anticoagulants with_cats_matches.chem_cat.unique() array(['Initiation of Oxidative', 'Outcomes of Oxidative Stress', 'Regulation of Oxidative Stress'], dtype=object) # Creating color palettes to label drug and chemical categories chems = with_cats_matches.chem_cat.unique() chem_pal = sns.color_palette( hls , n_colors=with_cats_matches.chem_cat.nunique()) chem_pal_dict = dict(zip(chems, chem_pal)) drugs = with_cats_matches.drug_cat.unique() drug_pal = sns.color_palette( tab20c , n_colors=with_cats_matches.drug_cat.nunique()) drug_pal[-5:] = sns.color_palette( tab20b , n_colors=5) drug_pal_dict = dict(zip(drugs, drug_pal)) with_cats_matches['chem_color'] = with_cats_matches.chem_cat.map(chem_pal_dict) with_cats_matches['drug_color'] = with_cats_matches.drug_cat.map(drug_pal_dict) sns.palplot(chem_pal) plt.gca().set_xticklabels(chems) plt.xticks(rotation=60) sns.palplot(drug_pal) plt.gca().set_xticklabels(drugs) plt.xticks(rotation=90); ## Save Color Palettes with open('drug_cat_palette.json', 'w') as fp: json.dump(drug_pal_dict, fp) with open('chem_cat_palette.json', 'w') as fp: json.dump(chem_pal_dict, fp) # Set NaN category color to white with_cats_matches.loc[with_cats_matches.drug_color.isna(), 'drug_color'] = white # Count articles per drug-chemical co-occurrence article_count = pd.DataFrame( with_cats_matches.groupby(['drug', 'chemical', 'drug_cat', 'chem_cat']).PMID.nunique() ).reset_index().rename(columns={'PMID': 'Article Count'}) article_count['log_count'] = np.log10(article_count['Article Count']) chem_colors_df = with_cats_matches[['chemical', 'chem_color']].drop_duplicates() chem_colors = [chem_colors_df[chem_colors_df.chemical == chem].chem_color.unique()[0] for chem in piv_count.index] drug_colors_df = with_cats_matches[['drug', 'drug_color']].drop_duplicates() drug_colors = [drug_colors_df[drug_colors_df.drug == drug].drug_color.unique()[0] for drug in piv_count.columns] piv_count = article_count.pivot_table( index='chemical', columns='drug', values='log_count', fill_value=0 ) sns.clustermap( piv_count, figsize=(22,13), cmap='viridis', row_colors=chem_colors, col_colors=drug_colors ) seaborn.matrix.ClusterGrid at 0x7ff7afcb4898 Find PMIDS assocaited with drugs via elastic search Searches abstracts for drug names or synonyms of drug names Finds number of occurances of drug name or synonyms in abstract Saves to output/Drug_PMID_occurances.csv drug_matches = pd.DataFrame() tot = drug_list_df.Name.nunique() for (drug, synonyms, category), m_df in progressbar.progressbar(drug_list_df.groupby(['Name', 'Synonyms', 'Drug Category'])): drug_match = { 'PMID': [], 'title': [], 'MeSH': [], 'count': [], 'Year': [], 'Month': [] } synonyms = synonyms.split(', ') drug = drug.lower() q = Q('match_phrase', abstract=drug) if synonyms: synonyms = [s.lower() for s in synonyms] for s in synonyms: q = q | Q('match_phrase', abstract=s) hits = Search( using=es, index= pubmed ).query(q) for h in hits.scan(): date_dict = json.loads(h.date.replace( ' , ' ')) drug_match['PMID'].append(h.pmid) drug_match['title'].append(h.title) drug_match['MeSH'].append(h.MeSH) drug_match['Year'].append(date_dict['Year']) drug_match['Month'].append(date_dict['Month']) entity_count = 0 for phrase in [drug] + synonyms: entity_lower = phrase.lower().replace( - , ) entity_count += abs_lower.count(entity_lower) drug_match['count'].append(entity_count) drug_match_df = pd.DataFrame.from_dict(drug_match) drug_match_df['drug'] = drug drug_match_df['category'] = category drug_matches = drug_matches.append(drug_match_df) drug_matches.head() 100% (161 of 161) |######################| Elapsed Time: 0:37:59 Time: 0:37:59 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PMID title MeSH count Year Month drug category 0 24853116 Acarbose monotherapy and weight loss in Easter... [Acarbose, therapeutic use, Asian Continental ... 0 2014 Nov acarbose Alpha-glucosidase Inhibitors 1 24863354 Comparative evaluation of polysaccharides isol... [Asteraceae, chemistry, Astragalus Plant, chem... 0 2014 Apr acarbose Alpha-glucosidase Inhibitors 2 24866329 Effects of sitagliptin or mitiglinide as an ad... [Acarbose, therapeutic use, Aged, Asian Contin... 0 2014 Jul acarbose Alpha-glucosidase Inhibitors 3 12918894 Nateglinide (Starlix): update on a new antidia... [Blood Glucose, physiology, Cyclohexanes, phar... 0 acarbose Alpha-glucosidase Inhibitors 4 20568489 Digoxin: serious drug interactions. [Digoxin, adverse effects, blood, Drug Interac... 0 2010 Apr acarbose Alpha-glucosidase Inhibitors drug_matches.to_csv('output/Drug_PMID_occurances.csv', index=False) drug_matches.shape (2702853, 8) drug_category_PMID_count = pd.DataFrame(drug_matches.groupby('category').PMID.nunique()).reset_index() drug_category_PMID_count .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } category PMID 0 ACE Inhibitors 70299 1 Alpha-glucosidase Inhibitors 2008 2 Angiotensin II Antagonists 16230 3 Anticoagulants 80628 4 Antiplatelets 82006 5 Beta Blockers 949488 6 Bile Acid Resins 2459 7 Calcium Antagonist 47735 8 Calcium Channel Blockers 25446 9 Cholesteron Absorption Blocker 2554 10 Diuretics 28829 11 Fibrates 12214 12 Glucagon-like peptide-1 blockers 5180 13 HMG-CoA Reductase inhibitors (Statins) 22166 14 Inotropes 246382 15 Insulin 7386 16 Metformin 16564 17 Na Channel Blockers 42512 18 Other Anti Arrhythmics 130224 19 Phosphodiesterase Inhbitors 21894 20 Potassium Channel Blockers 10292 21 Sulfonylureas 12331 22 Thiazolidinediones 5089 23 Thrombolytics 309306 24 Vasodilators 408803 25 Vasopressin Antagonists 850 Searching for PMIDs associated with each chemical If there is a MeSH id, searches pubmed index for abstract containing drug name OR MeSH terms containin mesh term If there is no MeSH id, only searches for drug name in abstract saves to output/Chemical_PMID_occurances.csv has_data_df = chemical_list_df[ (~chemical_list_df['Molecule/Enzyme/Protein'].isnull()) | (~chemical_list_df['MeSH Heading'].isnull()) ] chem_matches_df = pd.DataFrame() for (name, mesh, category), m_df in progressbar.progressbar(has_data_df.groupby(['Molecule/Enzyme/Protein', 'MeSH Heading', 'Biological Events of Oxidative Stress'])): hit_dict = { 'PMID': [], 'Article MeSH': [], 'Year': [], 'Month': [], } if mesh.lower() == 'none listed': q = Q('match_phrase', abstract=name.lower()) else: q = Q('match_phrase', abstract=name.lower()) | Q('match_phrase', MeSH=mesh) hits = Search( using=es, index= pubmed ).params( request_timeout=300 ).query(q) for h in hits.scan(): date_dict = json.loads(h.date.replace( ' , ' ')) hit_dict['PMID'].append(h.pmid) hit_dict['Article MeSH'].append(h.MeSH) hit_dict['Year'].append(date_dict['Year']) hit_dict['Month'].append(date_dict['Month']) hit_df = pd.DataFrame.from_dict(hit_dict) hit_df['category'] = category hit_df['chemical'] = name hit_df['MeSH'] = mesh chem_matches_df = chem_matches_df.append(hit_df) chem_matches_df.head() 100% (157 of 157) |######################| Elapsed Time: 0:44:52 Time: 0:44:52 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PMID Article MeSH Year Month category chemical MeSH 0 24852702 [Alcohols, metabolism, toxicity, Aldehydes, me... 2014 Sep Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 1 24854020 [Adult, Aldehydes, metabolism, Case-Control St... 2015 Apr Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 2 24854122 [Acetylcysteine, pharmacology, Aldehydes, phar... 2014 Nov Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 3 24877583 [4-Butyrolactone, chemistry, Aldehydes, chemis... 2014 Jun Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 4 24878441 [Absorption, Physicochemical, Acetonitriles, c... 2014 Nov Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes chem_matches_df.to_csv('output/Chemical_PMID_occurances.csv', index=False) chem_matches_df.shape (3291433, 7)","title":"Querying ElasticSearch for Drug/Chemical Occurrence"},{"location":"implementation/chemical_drug_elastic_occurance/chemical_drug_elastic_occurance/#finding-occurrences-of-chemicals-and-drugs-in-pubmed-abstracts","text":"Searches the ElasticSearch index created during CaseOLAP pipeline run for curated list of Drugs and Chemicals related to oxidative stress","title":"Finding Occurrences of Chemicals and Drugs in PubMed Abstracts"},{"location":"implementation/chemical_drug_elastic_occurance/chemical_drug_elastic_occurance/#output","text":"Chemical_PMID_occurances.csv : CSV table where each row is the occurance of a chemical in PubMed Drug_PMID_occurances.csv : CSV table where each row is the occurance of a drug in PubMed from elasticsearch import Elasticsearch from elasticsearch_dsl import Search, Q import pandas as pd from itertools import product import seaborn as sns import numpy as np import time import matplotlib.pyplot as plt import json import progressbar","title":"Output:"},{"location":"implementation/chemical_drug_elastic_occurance/chemical_drug_elastic_occurance/#load-drug-and-chemical-lists-initialize-elastic-search","text":"Requires elastic search engine to be running on cluster. Must have PMID index chemical_list_df = pd.read_csv('input/oxidative_stress_chemicals_SA_10222019.csv') chemical_list_df['Molecule/Enzyme/Protein'] = chemical_list_df['Molecule/Enzyme/Protein'].str.lower().str.strip() chemical_list_df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Biological Events of Oxidative Stress Molecular and Functional Categories Molecule/Enzyme/Protein MeSH Heading MeSH Supplementary MeSH tree numbers Chemical Formula Examples Pharm Actions Tree Numbers References 0 Initiation of Oxidative Reactive Oxygen Species (ROS) superoxide (anion radical) Superoxides NaN D01.248.497.158.685.750.850; D01.339.431.374.8... O2- Superoxide, Hydrogen Peroxide Oxidants D27.720.642,\\nD27.888.569.540 PMID: 25547488 1 Initiation of Oxidative Reactive Oxygen Species (ROS) hydrogen peroxide Hydrogen Peroxide NaN D01.248.497.158.685.750.424; D01.339.431.374.4... H2O2 NaN Anti-Infective Agents, Local D27.505.954.122.187 NaN 2 Initiation of Oxidative Reactive Oxygen Species (ROS) NaN NaN NaN NaN NaN NaN Oxidants D27.720.642,\\nD27.888.569.540 NaN 3 Initiation of Oxidative Reactive Oxygen Species (ROS) hydroxyl (radical) Hydroxyl Radical NaN D01.339.431.249; D01.248.497.158.459.300; D01.... HO NaN Oxidants D27.720.642,\\nD27.888.569.540 NaN 4 Initiation of Oxidative Reactive Oxygen Species (ROS) alpha oxygen None listed NaN NaN NaN NaN NaN NaN NaN drug_list_df = pd.read_csv('input/drug_list_SA_10222019.csv') drug_list_df['Name'] = drug_list_df['Name'].str.lower().str.strip() drug_list_df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Drug Category # Name Synonyms MeSH Descriptor MeSH tree(s) Common adverse effects Dosage (freq/amount/time/delivery) Duration (time) Pharm Action ... Unnamed: 1015 Unnamed: 1016 Unnamed: 1017 Unnamed: 1018 Unnamed: 1019 Unnamed: 1020 Unnamed: 1021 Unnamed: 1022 Unnamed: 1023 Unnamed: 1024 0 Anticoagulants 1.0 heparin ['Calciparine', 'Eparina', 'heparina', 'Hepari... heparin D09.698.373.400 Thrombocytopenia, Cerebral haemorrhage, Haemog... 1/18U/kg/iv 2 days Anticoagulants, \\nFibrinolytic Agents ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 1 Anticoagulants 2.0 warfarin ['4-Hydroxy-3-(3-oxo-1-phenylbutyl)coumarin', ... warfarin D03.383.663.283.446.520.914\\nD03.633.100.150.4... Haemorrhage, Haematoma, anaemia, Epistaxis, hy... 1/2-10mg/day/po As needed Anticoagulants, \\nRodenticides ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 2 Thrombolytics 3.0 streptokinase ['Streptokinase C precursor'] streptokinase D08.811.277.656.300.775\\nD12.776.124.125.662.537 blurred vision, confusion, dizziness, fever, s... 1/1,500,000 IU/iv 60min Fibrinolytic Agents ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 3 Thrombolytics 4.0 urokinase ['U-plasminogen activator', 'uPA', 'Urokinase-... Urokinase-Type Plasminogen Activator D08.811.277.656.300.760.910\\nD08.811.277.656.9... bleeding gums, coughing up blood, dizziness, h... 1/4,000,000U/iv 10min NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 4 Thrombolytics 5.0 tpa ['Alteplasa', 'Alteplase (genetical recombinat... Tissue Plasminogen Activator D08.811.277.656.300.760.875\\nD08.811.277.656.9... NaN 1/0.9mg/kg/iv 60min Fibrinolytic Agents ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 5 rows \u00d7 1025 columns es = Elasticsearch(timeout=300)","title":"Load Drug and Chemical lists, initialize Elastic Search"},{"location":"implementation/chemical_drug_elastic_occurance/chemical_drug_elastic_occurance/#find-pmids-associated-with-every-combination-of-drugs-and-chemicals-via-elastic-search","text":"output file saved to output/chem_drug_pair_matches.csv # All combinations of drugs and chemicals drug_chemicals = product( drug_list_df['Name'].dropna().unique(), chemical_list_df['Molecule/Enzyme/Protein'].dropna().unique() ) matches = pd.DataFrame() for (drug, chemical) in progressbar.progressbar(drug_chemicals): mol_matches = { 'PMID': [], 'title': [], 'Year': [], 'Month': [] } # Match drug and chemical q = Q( match_phrase , abstract=drug.lower().strip()) Q( match_phrase , abstract=chemical.lower().strip()) # Search hits = Search( using=es, index= pubmed ).params( request_timeout=300 ).query(q) for h in hits.scan(): date_dict = json.loads(h.date.replace( ' , ' ')) mol_matches['PMID'].append(h.pmid) mol_matches['title'].append(h.title) mol_matches['Year'].append(date_dict['Year']) mol_matches['Month'].append(date_dict['Month']) match_df = pd.DataFrame.from_dict(mol_matches) match_df['drug'] = drug.lower().strip() match_df['chemical'] = chemical.lower().strip() matches = matches.append(match_df) matches.head() | | # | 21059 Elapsed Time: 0:13:02 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PMID title Year Month drug chemical 0 8376590 Homocysteine, a thrombogenic agent, suppresses... 1993 Sep heparin hydrogen peroxide 1 25037421 Degradation of fucoidans from Sargassum fulvel... 2014 Oct heparin hydrogen peroxide 2 14561655 Role of hydrogen peroxide in sperm capacitatio... 2004 Feb heparin hydrogen peroxide 3 9040037 Protective effect of dextran sulfate and hepar... 1997 Jan heparin hydrogen peroxide 4 10547607 Heparin-binding EGF-like growth factor is expr... 1999 Nov heparin hydrogen peroxide matches.to_csv('output/chem_drug_pair_matches.csv', index=False) matches = pd.read_csv('output/chem_drug_pair_matches.csv')","title":"Find PMIDs associated with every combination of drugs and chemicals via elastic search"},{"location":"implementation/chemical_drug_elastic_occurance/chemical_drug_elastic_occurance/#plotting-drug-chemical-co-occurence-heatmap","text":"colors used to show category of drug, and oxidative stress category association of chemicals chem_name_cats = chemical_list_df[['Molecule/Enzyme/Protein', 'Biological Events of Oxidative Stress']]\\ .drop_duplicates().rename(columns={ 'Molecule/Enzyme/Protein': 'chemical', 'Biological Events of Oxidative Stress':'chem_cat' }).dropna() drug_name_cats = drug_list_df[['Name', 'Drug Category']]\\ .drop_duplicates().rename(columns={ 'Name': 'drug', 'Drug Category': 'drug_cat' }).dropna() with_cats_matches = matches.merge( chem_name_cats, how='left', validate='m:m' ) with_cats_matches = with_cats_matches.merge( drug_name_cats, how='left', validate='m:m' ) print(matches.dropna().shape, with_cats_matches.dropna().shape) with_cats_matches.head() (199479, 6) (204265, 8) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PMID title Year Month drug chemical chem_cat drug_cat 0 8376590 Homocysteine, a thrombogenic agent, suppresses... 1993.0 Sep heparin hydrogen peroxide Initiation of Oxidative Anticoagulants 1 25037421 Degradation of fucoidans from Sargassum fulvel... 2014.0 Oct heparin hydrogen peroxide Initiation of Oxidative Anticoagulants 2 14561655 Role of hydrogen peroxide in sperm capacitatio... 2004.0 Feb heparin hydrogen peroxide Initiation of Oxidative Anticoagulants 3 9040037 Protective effect of dextran sulfate and hepar... 1997.0 Jan heparin hydrogen peroxide Initiation of Oxidative Anticoagulants 4 10547607 Heparin-binding EGF-like growth factor is expr... 1999.0 Nov heparin hydrogen peroxide Initiation of Oxidative Anticoagulants with_cats_matches.chem_cat.unique() array(['Initiation of Oxidative', 'Outcomes of Oxidative Stress', 'Regulation of Oxidative Stress'], dtype=object) # Creating color palettes to label drug and chemical categories chems = with_cats_matches.chem_cat.unique() chem_pal = sns.color_palette( hls , n_colors=with_cats_matches.chem_cat.nunique()) chem_pal_dict = dict(zip(chems, chem_pal)) drugs = with_cats_matches.drug_cat.unique() drug_pal = sns.color_palette( tab20c , n_colors=with_cats_matches.drug_cat.nunique()) drug_pal[-5:] = sns.color_palette( tab20b , n_colors=5) drug_pal_dict = dict(zip(drugs, drug_pal)) with_cats_matches['chem_color'] = with_cats_matches.chem_cat.map(chem_pal_dict) with_cats_matches['drug_color'] = with_cats_matches.drug_cat.map(drug_pal_dict) sns.palplot(chem_pal) plt.gca().set_xticklabels(chems) plt.xticks(rotation=60) sns.palplot(drug_pal) plt.gca().set_xticklabels(drugs) plt.xticks(rotation=90); ## Save Color Palettes with open('drug_cat_palette.json', 'w') as fp: json.dump(drug_pal_dict, fp) with open('chem_cat_palette.json', 'w') as fp: json.dump(chem_pal_dict, fp) # Set NaN category color to white with_cats_matches.loc[with_cats_matches.drug_color.isna(), 'drug_color'] = white # Count articles per drug-chemical co-occurrence article_count = pd.DataFrame( with_cats_matches.groupby(['drug', 'chemical', 'drug_cat', 'chem_cat']).PMID.nunique() ).reset_index().rename(columns={'PMID': 'Article Count'}) article_count['log_count'] = np.log10(article_count['Article Count']) chem_colors_df = with_cats_matches[['chemical', 'chem_color']].drop_duplicates() chem_colors = [chem_colors_df[chem_colors_df.chemical == chem].chem_color.unique()[0] for chem in piv_count.index] drug_colors_df = with_cats_matches[['drug', 'drug_color']].drop_duplicates() drug_colors = [drug_colors_df[drug_colors_df.drug == drug].drug_color.unique()[0] for drug in piv_count.columns] piv_count = article_count.pivot_table( index='chemical', columns='drug', values='log_count', fill_value=0 ) sns.clustermap( piv_count, figsize=(22,13), cmap='viridis', row_colors=chem_colors, col_colors=drug_colors ) seaborn.matrix.ClusterGrid at 0x7ff7afcb4898","title":"Plotting Drug, chemical co-occurence heatmap"},{"location":"implementation/chemical_drug_elastic_occurance/chemical_drug_elastic_occurance/#find-pmids-assocaited-with-drugs-via-elastic-search","text":"Searches abstracts for drug names or synonyms of drug names Finds number of occurances of drug name or synonyms in abstract Saves to output/Drug_PMID_occurances.csv drug_matches = pd.DataFrame() tot = drug_list_df.Name.nunique() for (drug, synonyms, category), m_df in progressbar.progressbar(drug_list_df.groupby(['Name', 'Synonyms', 'Drug Category'])): drug_match = { 'PMID': [], 'title': [], 'MeSH': [], 'count': [], 'Year': [], 'Month': [] } synonyms = synonyms.split(', ') drug = drug.lower() q = Q('match_phrase', abstract=drug) if synonyms: synonyms = [s.lower() for s in synonyms] for s in synonyms: q = q | Q('match_phrase', abstract=s) hits = Search( using=es, index= pubmed ).query(q) for h in hits.scan(): date_dict = json.loads(h.date.replace( ' , ' ')) drug_match['PMID'].append(h.pmid) drug_match['title'].append(h.title) drug_match['MeSH'].append(h.MeSH) drug_match['Year'].append(date_dict['Year']) drug_match['Month'].append(date_dict['Month']) entity_count = 0 for phrase in [drug] + synonyms: entity_lower = phrase.lower().replace( - , ) entity_count += abs_lower.count(entity_lower) drug_match['count'].append(entity_count) drug_match_df = pd.DataFrame.from_dict(drug_match) drug_match_df['drug'] = drug drug_match_df['category'] = category drug_matches = drug_matches.append(drug_match_df) drug_matches.head() 100% (161 of 161) |######################| Elapsed Time: 0:37:59 Time: 0:37:59 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PMID title MeSH count Year Month drug category 0 24853116 Acarbose monotherapy and weight loss in Easter... [Acarbose, therapeutic use, Asian Continental ... 0 2014 Nov acarbose Alpha-glucosidase Inhibitors 1 24863354 Comparative evaluation of polysaccharides isol... [Asteraceae, chemistry, Astragalus Plant, chem... 0 2014 Apr acarbose Alpha-glucosidase Inhibitors 2 24866329 Effects of sitagliptin or mitiglinide as an ad... [Acarbose, therapeutic use, Aged, Asian Contin... 0 2014 Jul acarbose Alpha-glucosidase Inhibitors 3 12918894 Nateglinide (Starlix): update on a new antidia... [Blood Glucose, physiology, Cyclohexanes, phar... 0 acarbose Alpha-glucosidase Inhibitors 4 20568489 Digoxin: serious drug interactions. [Digoxin, adverse effects, blood, Drug Interac... 0 2010 Apr acarbose Alpha-glucosidase Inhibitors drug_matches.to_csv('output/Drug_PMID_occurances.csv', index=False) drug_matches.shape (2702853, 8) drug_category_PMID_count = pd.DataFrame(drug_matches.groupby('category').PMID.nunique()).reset_index() drug_category_PMID_count .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } category PMID 0 ACE Inhibitors 70299 1 Alpha-glucosidase Inhibitors 2008 2 Angiotensin II Antagonists 16230 3 Anticoagulants 80628 4 Antiplatelets 82006 5 Beta Blockers 949488 6 Bile Acid Resins 2459 7 Calcium Antagonist 47735 8 Calcium Channel Blockers 25446 9 Cholesteron Absorption Blocker 2554 10 Diuretics 28829 11 Fibrates 12214 12 Glucagon-like peptide-1 blockers 5180 13 HMG-CoA Reductase inhibitors (Statins) 22166 14 Inotropes 246382 15 Insulin 7386 16 Metformin 16564 17 Na Channel Blockers 42512 18 Other Anti Arrhythmics 130224 19 Phosphodiesterase Inhbitors 21894 20 Potassium Channel Blockers 10292 21 Sulfonylureas 12331 22 Thiazolidinediones 5089 23 Thrombolytics 309306 24 Vasodilators 408803 25 Vasopressin Antagonists 850","title":"Find PMIDS assocaited with drugs via elastic search"},{"location":"implementation/chemical_drug_elastic_occurance/chemical_drug_elastic_occurance/#searching-for-pmids-associated-with-each-chemical","text":"If there is a MeSH id, searches pubmed index for abstract containing drug name OR MeSH terms containin mesh term If there is no MeSH id, only searches for drug name in abstract saves to output/Chemical_PMID_occurances.csv has_data_df = chemical_list_df[ (~chemical_list_df['Molecule/Enzyme/Protein'].isnull()) | (~chemical_list_df['MeSH Heading'].isnull()) ] chem_matches_df = pd.DataFrame() for (name, mesh, category), m_df in progressbar.progressbar(has_data_df.groupby(['Molecule/Enzyme/Protein', 'MeSH Heading', 'Biological Events of Oxidative Stress'])): hit_dict = { 'PMID': [], 'Article MeSH': [], 'Year': [], 'Month': [], } if mesh.lower() == 'none listed': q = Q('match_phrase', abstract=name.lower()) else: q = Q('match_phrase', abstract=name.lower()) | Q('match_phrase', MeSH=mesh) hits = Search( using=es, index= pubmed ).params( request_timeout=300 ).query(q) for h in hits.scan(): date_dict = json.loads(h.date.replace( ' , ' ')) hit_dict['PMID'].append(h.pmid) hit_dict['Article MeSH'].append(h.MeSH) hit_dict['Year'].append(date_dict['Year']) hit_dict['Month'].append(date_dict['Month']) hit_df = pd.DataFrame.from_dict(hit_dict) hit_df['category'] = category hit_df['chemical'] = name hit_df['MeSH'] = mesh chem_matches_df = chem_matches_df.append(hit_df) chem_matches_df.head() 100% (157 of 157) |######################| Elapsed Time: 0:44:52 Time: 0:44:52 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PMID Article MeSH Year Month category chemical MeSH 0 24852702 [Alcohols, metabolism, toxicity, Aldehydes, me... 2014 Sep Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 1 24854020 [Adult, Aldehydes, metabolism, Case-Control St... 2015 Apr Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 2 24854122 [Acetylcysteine, pharmacology, Aldehydes, phar... 2014 Nov Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 3 24877583 [4-Butyrolactone, chemistry, Aldehydes, chemis... 2014 Jun Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 4 24878441 [Absorption, Physicochemical, Acetonitriles, c... 2014 Nov Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes chem_matches_df.to_csv('output/Chemical_PMID_occurances.csv', index=False) chem_matches_df.shape (3291433, 7)","title":"Searching for PMIDs associated with each chemical"},{"location":"implementation/create_oxidative_stress_categories/create_oxidative_stress_categories/","text":"Creating CaseOLAP Inputs by linking occurrences of Drugs and Markers of Oxidative Stress This file creates two outputs: output/metadata_pmid2count.json and output/metadata_pmid2count.json which are used as the inputs for running the final score calculation in caseOLAP. from elasticsearch import Elasticsearch from elasticsearch_dsl import Search, Q import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns import json Importing oxidative stress chemical PMID occurrences PMID occurrence list generated in chemical_drug_elastic_occurance.ipynb ox_cat_df = pd.read_csv('output/Chemical_PMID_occurances.csv') print(ox_cat_df.shape) ox_cat_df.head() (3291433, 5) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Article MeSH PMID category chemical MeSH 0 ['Alcohols', 'metabolism', 'toxicity', 'Aldehy... 24852702 Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 1 ['Adult', 'Aldehydes', 'metabolism', 'Case-Con... 24854020 Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 2 ['Acetylcysteine', 'pharmacology', 'Aldehydes'... 24854122 Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 3 ['4-Butyrolactone', 'chemistry', 'Aldehydes', ... 24877583 Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 4 ['Absorption, Physicochemical', 'Acetonitriles... 24878441 Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes pmid_per_cat_count = pd.DataFrame(ox_cat_df.groupby('category').PMID.nunique()) pmid_per_cat_count .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PMID category Initiation of Oxidative 405009 Outcomes of Oxidative Stress 117386 Regulation of Oxidative Stress 1163548 Finding drug occurrences for each oxidative stress category Loads output/Drug_PMID_occurances.csv file generated in chemical_drug_elastic_occurance.ipynb merges with PMID occurances of oxidative stress categories defined above in variable ox_cat_df drug_occurance_df = pd.read_csv('output/Drug_PMID_occurances.csv') drug_occurance_df['PMID'] = drug_occurance_df['PMID'].astype(int) drug_occurance_df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } MeSH PMID abstract count title drug 0 ['Acarbose', 'therapeutic use', 'Asian Contine... 24853116 to demonstrate if weight loss achieved with ac... 14 Acarbose monotherapy and weight loss in Easter... acarbose 1 ['Asteraceae', 'chemistry', 'Astragalus Plant'... 24863354 the incidence of diabetes has increased consid... 2 Comparative evaluation of polysaccharides isol... acarbose 2 ['Acarbose', 'therapeutic use', 'Aged', 'Asian... 24866329 postprandial hyperglycemia and blood glucose f... 10 Effects of sitagliptin or mitiglinide as an ad... acarbose 3 ['Blood Glucose', 'physiology', 'Cyclohexanes'... 12918894 nateglinide is a new oral antidiabetic agent t... 2 Nateglinide (Starlix): update on a new antidia... acarbose 4 ['Digoxin', 'adverse effects', 'blood', 'Drug ... 20568489 digoxin has a narrow therapeutic margin and po... 2 Digoxin: serious drug interactions. acarbose drug_ox_cat_df = ox_cat_df[['category', 'PMID']].drop_duplicates().merge( drug_occurance_df, validate='m:m', how='inner', ) # Drugs listed per category pd.DataFrame(drug_ox_cat_df.groupby('category').drug.nunique()) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } drug category Initiation of Oxidative 142 Outcomes of Oxidative Stress 133 Regulation of Oxidative Stress 146 # PMID Count per drug in a category sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(18,8)) ax.set_yscale('symlog') sns.countplot( x='category', hue='drug', data=drug_ox_cat_df, ax=ax, ) ax.legend().remove() sns.despine() ax.set_xlabel('') ax.set_ylabel('PMID Occurrences') Text(0, 0.5, 'PMID Occurrences') # Print top drugs per category pmid_per_drug_count = pd.DataFrame(drug_ox_cat_df.groupby(['drug','category']).PMID.nunique()) for cat, c_df in pmid_per_drug_count.reset_index().groupby('category'): print( cat,':', ', '.join(c_df.sort_values(by='PMID', ascending=False).head(n=10).drug.values), '\\n' ) Initiation of Oxidative : nitric oxide, penbutolol, nitroglycerin, nitroprusside, tpa, adenosine, norepinephrine, dopamine, aspirin, captopril Outcomes of Oxidative Stress : penbutolol, nitric oxide, tpa, nitroglycerin, adenosine, dopamine, captopril, aspirin, norepinephrine, isoprenaline Regulation of Oxidative Stress : penbutolol, tpa, nitric oxide, nitroglycerin, adenosine, dopamine, heparin, norepinephrine, captopril, aspirin Creating inputs to caseOLAP pipeline metadata_pmid2count.json File containing a dictionary with structure: { PMID : { Entity : # of Occurences } } pmid2count = {} # ONLY LOOKS AT PMIDS WITH BOTH A DRUG AND A CATEGORY ASSOCIATED for (pmid, entity), p_df in drug_occurance_df.groupby(['PMID', 'drug']): pmid = str(pmid) if len(p_df['count'].values) 1: if len(p_df[['PMID', 'count']].drop_duplicates()) 1: print('ERROR LONG VALUE', p_df) if not pmid in pmid2count.keys(): pmid2count[pmid] = {} pmid2count[pmid][entity] = str(list(p_df['count'].values)[0]) with open('output/metadata_pmid2count.json', 'w') as pmid2count_json: json.dump(pmid2count, pmid2count_json) metadata_cell2pmid.json File containing a dictionary with structure: { Category : [ PMID ,...] } long_short_category_map = { Initiation of Oxidative : IoOS , Outcomes of Oxidative Stress : OoOS , Regulation of Oxidative Stress : RoOS } drug_ox_cat_df['category_short'] = drug_ox_cat_df['category'].map(long_short_category_map) cell2pmid = {} for category, c_df in drug_ox_cat_df.groupby('category_short'): cell2pmid[category] = list(c_df.PMID.astype(str).unique().values) with open('output/metadata_cell2pmid.json', 'w') as cell2pmid_json: json.dump(cell2pmid, cell2pmid_json)","title":"Generating Final Inputs for CaseOLAP"},{"location":"implementation/create_oxidative_stress_categories/create_oxidative_stress_categories/#creating-caseolap-inputs-by-linking-occurrences-of-drugs-and-markers-of-oxidative-stress","text":"This file creates two outputs: output/metadata_pmid2count.json and output/metadata_pmid2count.json which are used as the inputs for running the final score calculation in caseOLAP. from elasticsearch import Elasticsearch from elasticsearch_dsl import Search, Q import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns import json","title":"Creating CaseOLAP Inputs by linking occurrences of Drugs and Markers of Oxidative Stress"},{"location":"implementation/create_oxidative_stress_categories/create_oxidative_stress_categories/#importing-oxidative-stress-chemical-pmid-occurrences","text":"PMID occurrence list generated in chemical_drug_elastic_occurance.ipynb ox_cat_df = pd.read_csv('output/Chemical_PMID_occurances.csv') print(ox_cat_df.shape) ox_cat_df.head() (3291433, 5) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Article MeSH PMID category chemical MeSH 0 ['Alcohols', 'metabolism', 'toxicity', 'Aldehy... 24852702 Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 1 ['Adult', 'Aldehydes', 'metabolism', 'Case-Con... 24854020 Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 2 ['Acetylcysteine', 'pharmacology', 'Aldehydes'... 24854122 Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 3 ['4-Butyrolactone', 'chemistry', 'Aldehydes', ... 24877583 Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes 4 ['Absorption, Physicochemical', 'Acetonitriles... 24878441 Initiation of Oxidative 4-hydroxy-2-nonenal (4-HNE) Aldehydes pmid_per_cat_count = pd.DataFrame(ox_cat_df.groupby('category').PMID.nunique()) pmid_per_cat_count .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PMID category Initiation of Oxidative 405009 Outcomes of Oxidative Stress 117386 Regulation of Oxidative Stress 1163548","title":"Importing oxidative stress chemical PMID occurrences"},{"location":"implementation/create_oxidative_stress_categories/create_oxidative_stress_categories/#finding-drug-occurrences-for-each-oxidative-stress-category","text":"Loads output/Drug_PMID_occurances.csv file generated in chemical_drug_elastic_occurance.ipynb merges with PMID occurances of oxidative stress categories defined above in variable ox_cat_df drug_occurance_df = pd.read_csv('output/Drug_PMID_occurances.csv') drug_occurance_df['PMID'] = drug_occurance_df['PMID'].astype(int) drug_occurance_df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } MeSH PMID abstract count title drug 0 ['Acarbose', 'therapeutic use', 'Asian Contine... 24853116 to demonstrate if weight loss achieved with ac... 14 Acarbose monotherapy and weight loss in Easter... acarbose 1 ['Asteraceae', 'chemistry', 'Astragalus Plant'... 24863354 the incidence of diabetes has increased consid... 2 Comparative evaluation of polysaccharides isol... acarbose 2 ['Acarbose', 'therapeutic use', 'Aged', 'Asian... 24866329 postprandial hyperglycemia and blood glucose f... 10 Effects of sitagliptin or mitiglinide as an ad... acarbose 3 ['Blood Glucose', 'physiology', 'Cyclohexanes'... 12918894 nateglinide is a new oral antidiabetic agent t... 2 Nateglinide (Starlix): update on a new antidia... acarbose 4 ['Digoxin', 'adverse effects', 'blood', 'Drug ... 20568489 digoxin has a narrow therapeutic margin and po... 2 Digoxin: serious drug interactions. acarbose drug_ox_cat_df = ox_cat_df[['category', 'PMID']].drop_duplicates().merge( drug_occurance_df, validate='m:m', how='inner', ) # Drugs listed per category pd.DataFrame(drug_ox_cat_df.groupby('category').drug.nunique()) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } drug category Initiation of Oxidative 142 Outcomes of Oxidative Stress 133 Regulation of Oxidative Stress 146 # PMID Count per drug in a category sns.set_context('talk', font_scale=1.5) fig, ax = plt.subplots(figsize=(18,8)) ax.set_yscale('symlog') sns.countplot( x='category', hue='drug', data=drug_ox_cat_df, ax=ax, ) ax.legend().remove() sns.despine() ax.set_xlabel('') ax.set_ylabel('PMID Occurrences') Text(0, 0.5, 'PMID Occurrences') # Print top drugs per category pmid_per_drug_count = pd.DataFrame(drug_ox_cat_df.groupby(['drug','category']).PMID.nunique()) for cat, c_df in pmid_per_drug_count.reset_index().groupby('category'): print( cat,':', ', '.join(c_df.sort_values(by='PMID', ascending=False).head(n=10).drug.values), '\\n' ) Initiation of Oxidative : nitric oxide, penbutolol, nitroglycerin, nitroprusside, tpa, adenosine, norepinephrine, dopamine, aspirin, captopril Outcomes of Oxidative Stress : penbutolol, nitric oxide, tpa, nitroglycerin, adenosine, dopamine, captopril, aspirin, norepinephrine, isoprenaline Regulation of Oxidative Stress : penbutolol, tpa, nitric oxide, nitroglycerin, adenosine, dopamine, heparin, norepinephrine, captopril, aspirin","title":"Finding drug occurrences for each oxidative stress category"},{"location":"implementation/create_oxidative_stress_categories/create_oxidative_stress_categories/#creating-inputs-to-caseolap-pipeline","text":"","title":"Creating inputs to caseOLAP pipeline"},{"location":"implementation/create_oxidative_stress_categories/create_oxidative_stress_categories/#metadata_pmid2countjson","text":"File containing a dictionary with structure: { PMID : { Entity : # of Occurences } } pmid2count = {} # ONLY LOOKS AT PMIDS WITH BOTH A DRUG AND A CATEGORY ASSOCIATED for (pmid, entity), p_df in drug_occurance_df.groupby(['PMID', 'drug']): pmid = str(pmid) if len(p_df['count'].values) 1: if len(p_df[['PMID', 'count']].drop_duplicates()) 1: print('ERROR LONG VALUE', p_df) if not pmid in pmid2count.keys(): pmid2count[pmid] = {} pmid2count[pmid][entity] = str(list(p_df['count'].values)[0]) with open('output/metadata_pmid2count.json', 'w') as pmid2count_json: json.dump(pmid2count, pmid2count_json)","title":"metadata_pmid2count.json"},{"location":"implementation/create_oxidative_stress_categories/create_oxidative_stress_categories/#metadata_cell2pmidjson","text":"File containing a dictionary with structure: { Category : [ PMID ,...] } long_short_category_map = { Initiation of Oxidative : IoOS , Outcomes of Oxidative Stress : OoOS , Regulation of Oxidative Stress : RoOS } drug_ox_cat_df['category_short'] = drug_ox_cat_df['category'].map(long_short_category_map) cell2pmid = {} for category, c_df in drug_ox_cat_df.groupby('category_short'): cell2pmid[category] = list(c_df.PMID.astype(str).unique().values) with open('output/metadata_cell2pmid.json', 'w') as cell2pmid_json: json.dump(cell2pmid, cell2pmid_json)","title":"metadata_cell2pmid.json"},{"location":"instructions/Export_Subgraph/","text":"Export Subgraph of Reactome This files generates cypher exports of the neighborhood around each drug found in the reactome database related to oxidative stress. Files export to [Path_To_Local_Graph_DB]/import/drug_subgraphs/[Drug Name].cypher import neo4j_functions.driver as neo4j_driver import pandas as pd import importlib import progressbar drug_pathway_caseolap = pd.read_csv('output/drug_reactome_pathways_caseolap.csv') drug_pathway_caseolap.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Drug Pathway Species edgeLength IoOS OoOS RoOS drug 0 warfarin [cytosol] Chaperone Mediated Autophagy Homo sapiens 2.0 0.077812 0.261603 0.164026 warfarin 1 warfarin [cytosol] Pink/Parkin Mediated Mitophagy Homo sapiens 2.0 0.077812 0.261603 0.164026 warfarin 2 warfarin [cytosol] Receptor Mediated Mitophagy Homo sapiens 2.0 0.077812 0.261603 0.164026 warfarin 3 warfarin [cytosol] Microautophagy Homo sapiens 2.0 0.077812 0.261603 0.164026 warfarin 4 warfarin [cytosol] Amplification of signal from unattached kine... Homo sapiens 2.0 0.077812 0.261603 0.164026 warfarin # Connect to local Reactome driver = neo4j_driver.driver(uri = bolt://localhost:7687 , user = neo4j , password = Akre1234 ) drugs = drug_pathway_caseolap.Drug.unique() lowered_drugs = [d.lower() for d in drugs] query = ( CALL apoc.export.graphml.query( MATCH (d:Drug)-[a*1..2]-(b) WHERE toLower(d.displayName) IN %s RETURN d,a,b , /all_drugs.graphml , {readLabels:true, storeNodeIds: true} ) % ( [' + ', ' .join(lowered_drugs) + '] ) ) print(query) driver.run_query(query); CALL apoc.export.graphml.query( MATCH (d:Drug)-[a*1..2]-(b) WHERE toLower(d.displayName) IN ['warfarin [cytosol]', 'rivaroxaban [extracellular region]', 'dabigatran [extracellular region]', 'apixaban [extracellular region]', 'edoxaban [extracellular region]', 'carvedilol [extracellular region]', 'propranolol [extracellular region]', 'metoprolol [extracellular region]', 'sotalol [extracellular region]', 'nebivolol [extracellular region]', 'acebutolol [extracellular region]', 'atenolol [extracellular region]', 'betaxolol [extracellular region]', 'esmolol [extracellular region]', 'labetalol [extracellular region]', 'ticagrelor [extracellular region]', 'ticlopidine [extracellular region]', 'clopidogrel [extracellular region]', 'r-138727 [extracellular region]', 'cangrelor [extracellular region]', 'dobutamine [extracellular region]', 'pindolol [extracellular region]', 'isoprenaline [extracellular region]', 'procainamide [extracellular region]', 'lidocaine [extracellular region]', 'disopyramide [extracellular region]', 'quinidine [extracellular region]', 'phenytoin [extracellular region]', 'mexiletine [extracellular region]', 'tocainide [extracellular region]', 'propafenone [extracellular region]', 'flecainide [extracellular region]', 'dofetilide [extracellular region]', 'ibutilide [extracellular region]', 'amlodipine [extracellular region]', 'diltiazem [extracellular region]', 'isradipine [extracellular region]', 'nifedipine [extracellular region]', 'felodipine [extracellular region]', 'nicardipine [extracellular region]', 'nisoldipine [extracellular region]', 'verapamil [extracellular region]', 'captopril [extracellular region]', 'lisinopril [extracellular region]', 'irbesartan [extracellular region]', 'telmisartan [extracellular region]', 'losartan [extracellular region]', 'olmesartan [extracellular region]', 'candesartan [extracellular region]', 'valsartan [extracellular region]', 'benazepril [endoplasmic reticulum lumen]', 'perindopril [endoplasmic reticulum lumen]', 'ramipril [endoplasmic reticulum lumen]', 'quinapril [endoplasmic reticulum lumen]', 'fosinopril [endoplasmic reticulum lumen]', 'enalapril [endoplasmic reticulum lumen]', 'enoximone [cytosol]', 'milrinone [cytosol]'] RETURN d,a,b , /all_drugs.graphml , {readLabels:true, storeNodeIds: true} )","title":"Export Neo4J Subgraph in Python"},{"location":"instructions/Export_Subgraph/#export-subgraph-of-reactome","text":"This files generates cypher exports of the neighborhood around each drug found in the reactome database related to oxidative stress. Files export to [Path_To_Local_Graph_DB]/import/drug_subgraphs/[Drug Name].cypher import neo4j_functions.driver as neo4j_driver import pandas as pd import importlib import progressbar drug_pathway_caseolap = pd.read_csv('output/drug_reactome_pathways_caseolap.csv') drug_pathway_caseolap.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Drug Pathway Species edgeLength IoOS OoOS RoOS drug 0 warfarin [cytosol] Chaperone Mediated Autophagy Homo sapiens 2.0 0.077812 0.261603 0.164026 warfarin 1 warfarin [cytosol] Pink/Parkin Mediated Mitophagy Homo sapiens 2.0 0.077812 0.261603 0.164026 warfarin 2 warfarin [cytosol] Receptor Mediated Mitophagy Homo sapiens 2.0 0.077812 0.261603 0.164026 warfarin 3 warfarin [cytosol] Microautophagy Homo sapiens 2.0 0.077812 0.261603 0.164026 warfarin 4 warfarin [cytosol] Amplification of signal from unattached kine... Homo sapiens 2.0 0.077812 0.261603 0.164026 warfarin # Connect to local Reactome driver = neo4j_driver.driver(uri = bolt://localhost:7687 , user = neo4j , password = Akre1234 ) drugs = drug_pathway_caseolap.Drug.unique() lowered_drugs = [d.lower() for d in drugs] query = ( CALL apoc.export.graphml.query( MATCH (d:Drug)-[a*1..2]-(b) WHERE toLower(d.displayName) IN %s RETURN d,a,b , /all_drugs.graphml , {readLabels:true, storeNodeIds: true} ) % ( [' + ', ' .join(lowered_drugs) + '] ) ) print(query) driver.run_query(query); CALL apoc.export.graphml.query( MATCH (d:Drug)-[a*1..2]-(b) WHERE toLower(d.displayName) IN ['warfarin [cytosol]', 'rivaroxaban [extracellular region]', 'dabigatran [extracellular region]', 'apixaban [extracellular region]', 'edoxaban [extracellular region]', 'carvedilol [extracellular region]', 'propranolol [extracellular region]', 'metoprolol [extracellular region]', 'sotalol [extracellular region]', 'nebivolol [extracellular region]', 'acebutolol [extracellular region]', 'atenolol [extracellular region]', 'betaxolol [extracellular region]', 'esmolol [extracellular region]', 'labetalol [extracellular region]', 'ticagrelor [extracellular region]', 'ticlopidine [extracellular region]', 'clopidogrel [extracellular region]', 'r-138727 [extracellular region]', 'cangrelor [extracellular region]', 'dobutamine [extracellular region]', 'pindolol [extracellular region]', 'isoprenaline [extracellular region]', 'procainamide [extracellular region]', 'lidocaine [extracellular region]', 'disopyramide [extracellular region]', 'quinidine [extracellular region]', 'phenytoin [extracellular region]', 'mexiletine [extracellular region]', 'tocainide [extracellular region]', 'propafenone [extracellular region]', 'flecainide [extracellular region]', 'dofetilide [extracellular region]', 'ibutilide [extracellular region]', 'amlodipine [extracellular region]', 'diltiazem [extracellular region]', 'isradipine [extracellular region]', 'nifedipine [extracellular region]', 'felodipine [extracellular region]', 'nicardipine [extracellular region]', 'nisoldipine [extracellular region]', 'verapamil [extracellular region]', 'captopril [extracellular region]', 'lisinopril [extracellular region]', 'irbesartan [extracellular region]', 'telmisartan [extracellular region]', 'losartan [extracellular region]', 'olmesartan [extracellular region]', 'candesartan [extracellular region]', 'valsartan [extracellular region]', 'benazepril [endoplasmic reticulum lumen]', 'perindopril [endoplasmic reticulum lumen]', 'ramipril [endoplasmic reticulum lumen]', 'quinapril [endoplasmic reticulum lumen]', 'fosinopril [endoplasmic reticulum lumen]', 'enalapril [endoplasmic reticulum lumen]', 'enoximone [cytosol]', 'milrinone [cytosol]'] RETURN d,a,b , /all_drugs.graphml , {readLabels:true, storeNodeIds: true} )","title":"Export Subgraph of Reactome"},{"location":"instructions/Import_Subgraph/","text":"Create a subgraph from exports made on the Reactome graph Database This section relies on having exported a subgraph of all desired drugs to a file called all_drugs.graphml File is created in the Export_Subgraph.ipynb Manually must move the file from the reactome graphdb to the import folder of a new graphdb Note: Must have started running a new empty neo4j graph database to succesfully connect import neo4j_functions.driver as neo4j_driver import pandas as pd import importlib import progressbar import os # Connect to new empty local database driver = neo4j_driver.driver(uri = bolt://localhost:7687 , user = neo4j , password = subgraph1234 ) If you encounter the error java.lang.OutOfMemoryError: Java heap space try going in to the neo4j.conf file and removing/commenting out the lines: dbms.memory.heap.initial_size=512m dbms.memory.heap.max_size=1G query = ( CALL apoc.import.graphml('file:/all_drugs.graphml', {readLabels:true, storeNodeIds:true}); ) driver.run_query(query) neo4j.BoltStatementResult at 0x11e2dfb38","title":"Import GraphML Subgraph to Neo4J in Python"},{"location":"instructions/Import_Subgraph/#create-a-subgraph-from-exports-made-on-the-reactome-graph-database","text":"This section relies on having exported a subgraph of all desired drugs to a file called all_drugs.graphml File is created in the Export_Subgraph.ipynb Manually must move the file from the reactome graphdb to the import folder of a new graphdb Note: Must have started running a new empty neo4j graph database to succesfully connect import neo4j_functions.driver as neo4j_driver import pandas as pd import importlib import progressbar import os # Connect to new empty local database driver = neo4j_driver.driver(uri = bolt://localhost:7687 , user = neo4j , password = subgraph1234 ) If you encounter the error java.lang.OutOfMemoryError: Java heap space try going in to the neo4j.conf file and removing/commenting out the lines: dbms.memory.heap.initial_size=512m dbms.memory.heap.max_size=1G query = ( CALL apoc.import.graphml('file:/all_drugs.graphml', {readLabels:true, storeNodeIds:true}); ) driver.run_query(query) neo4j.BoltStatementResult at 0x11e2dfb38","title":"Create a subgraph from exports made on the Reactome graph Database"},{"location":"instructions/Query_Neo4j_Python/","text":"Querying a Neo4j Instance in Python This instruction set requires having a running Neo4j instance. Running Neo4j Neo4j is most easily run locally using the desktop GUI version. Alternatively from the command line it can be run with neo4j start Importing required modules from neo4j import GraphDatabase Initializing Driver and Creating Cypher Query The driver uses the neo4j-driver python package to connect via neo4j's api to my locally running Reactome Database. Queries are written the the Cypher query language. A good cheatsheet for commands can be found here # Initialize connection to database driver = GraphDatabase.driver('bolt://localhost:7687', auth=('neo4j', 'Akre1234')) query = 'MATCH (a:Drug) RETURN a.name, a.stId LIMIT 5' Run Cypher query and print desired results The query returned name and stId properties of 5 drugs. Each returned record will only contain the specified information form the query. with driver.session() as session: info = session.run(query) for item in info: print('Name:', item.values()[0], 'id:', item.values()[1]) Name: ['trastuzumab', 'herceptin', 'D5v8', 'R-597'] id: R-ALL-9634466 Name: ['CP-724714'] id: R-ALL-9649889 Name: ['Afatinib', 'BIBW2992', 'Irreversible TKI inhibitor afatinib generic inhibits EGFR and ERBB2 (HER2)'] id: R-ALL-1220577 Name: ['AZ5104'] id: R-ALL-9649879 Name: ['Sapitinib'] id: R-ALL-9649894","title":"Querying Neo4J in Python"},{"location":"instructions/Query_Neo4j_Python/#querying-a-neo4j-instance-in-python","text":"This instruction set requires having a running Neo4j instance.","title":"Querying a Neo4j Instance in Python"},{"location":"instructions/Query_Neo4j_Python/#running-neo4j","text":"Neo4j is most easily run locally using the desktop GUI version. Alternatively from the command line it can be run with neo4j start","title":"Running Neo4j"},{"location":"instructions/Query_Neo4j_Python/#importing-required-modules","text":"from neo4j import GraphDatabase","title":"Importing required modules"},{"location":"instructions/Query_Neo4j_Python/#initializing-driver-and-creating-cypher-query","text":"The driver uses the neo4j-driver python package to connect via neo4j's api to my locally running Reactome Database. Queries are written the the Cypher query language. A good cheatsheet for commands can be found here # Initialize connection to database driver = GraphDatabase.driver('bolt://localhost:7687', auth=('neo4j', 'Akre1234')) query = 'MATCH (a:Drug) RETURN a.name, a.stId LIMIT 5'","title":"Initializing Driver and Creating Cypher Query"},{"location":"instructions/Query_Neo4j_Python/#run-cypher-query-and-print-desired-results","text":"The query returned name and stId properties of 5 drugs. Each returned record will only contain the specified information form the query. with driver.session() as session: info = session.run(query) for item in info: print('Name:', item.values()[0], 'id:', item.values()[1]) Name: ['trastuzumab', 'herceptin', 'D5v8', 'R-597'] id: R-ALL-9634466 Name: ['CP-724714'] id: R-ALL-9649889 Name: ['Afatinib', 'BIBW2992', 'Irreversible TKI inhibitor afatinib generic inhibits EGFR and ERBB2 (HER2)'] id: R-ALL-1220577 Name: ['AZ5104'] id: R-ALL-9649879 Name: ['Sapitinib'] id: R-ALL-9649894","title":"Run Cypher query and print desired results"},{"location":"instructions/Query_Python_Elastic/","text":"Querying ElasticSearch in Python This instruction set requires having a running elasticsearch instance. Running the ElasticSearch Server To run the ElasticSearch instance in the cloud navigate to the folder ~/software/elasticsearch-6.5.4/bin: cd ~/software/elasticsearch-6.5.4/bin Then type: ./elasticsearch Importing required modules from elasticsearch import Elasticsearch from elasticsearch_dsl import Search, Q Connecting to the ElasticSearch Instance es = Elasticsearch() Example search on pubmed article title's search_term = 'herceptin' # `hits` variable will store all hits for the search term defined above hits = Search( using=es, index= pubmed ).params( request_timeout=300 ).query( match_phrase , title=search_term, # title is the defined field to look for search term in, can be modified to abstract/date/etc. ) Parsing hits for relevant pubmed articles for hit in hits: print('Title:',hit.title, 'PMID:', hit.pmid) Title: [Combination therapy herceptin+taxotere/Herceptin+navelbine]. PMID: 23573614 Title: Herceptin. PMID: 10214591 Title: [Herceptin]. PMID: 10883160 Title: Herceptin. PMID: 18071947 Title: [Herceptin (trastuzumab)]. PMID: 17687197 Title: Trastuzumab (herceptin). PMID: 21816914 Title: [Trastuzumab (Herceptin)]. PMID: 11977556 Title: Development of herceptin. PMID: 15687596 Title: Subcutaneous herceptin therapy. PMID: 23996323 Title: Dose scheduling--Herceptin. PMID: 11694785 # Showing available properties in the pubmed hit dir(hit) ['MeSH', 'abstract', 'date', 'journal', 'location', 'meta', 'pmid', 'title']","title":"Querying ElasticSearch in Python"},{"location":"instructions/Query_Python_Elastic/#querying-elasticsearch-in-python","text":"This instruction set requires having a running elasticsearch instance.","title":"Querying ElasticSearch in Python"},{"location":"instructions/Query_Python_Elastic/#running-the-elasticsearch-server","text":"To run the ElasticSearch instance in the cloud navigate to the folder ~/software/elasticsearch-6.5.4/bin: cd ~/software/elasticsearch-6.5.4/bin Then type: ./elasticsearch","title":"Running the ElasticSearch Server"},{"location":"instructions/Query_Python_Elastic/#importing-required-modules","text":"from elasticsearch import Elasticsearch from elasticsearch_dsl import Search, Q","title":"Importing required modules"},{"location":"instructions/Query_Python_Elastic/#connecting-to-the-elasticsearch-instance","text":"es = Elasticsearch()","title":"Connecting to the ElasticSearch Instance"},{"location":"instructions/Query_Python_Elastic/#example-search-on-pubmed-article-titles","text":"search_term = 'herceptin' # `hits` variable will store all hits for the search term defined above hits = Search( using=es, index= pubmed ).params( request_timeout=300 ).query( match_phrase , title=search_term, # title is the defined field to look for search term in, can be modified to abstract/date/etc. )","title":"Example search on pubmed article title's"},{"location":"instructions/Query_Python_Elastic/#parsing-hits-for-relevant-pubmed-articles","text":"for hit in hits: print('Title:',hit.title, 'PMID:', hit.pmid) Title: [Combination therapy herceptin+taxotere/Herceptin+navelbine]. PMID: 23573614 Title: Herceptin. PMID: 10214591 Title: [Herceptin]. PMID: 10883160 Title: Herceptin. PMID: 18071947 Title: [Herceptin (trastuzumab)]. PMID: 17687197 Title: Trastuzumab (herceptin). PMID: 21816914 Title: [Trastuzumab (Herceptin)]. PMID: 11977556 Title: Development of herceptin. PMID: 15687596 Title: Subcutaneous herceptin therapy. PMID: 23996323 Title: Dose scheduling--Herceptin. PMID: 11694785 # Showing available properties in the pubmed hit dir(hit) ['MeSH', 'abstract', 'date', 'journal', 'location', 'meta', 'pmid', 'title']","title":"Parsing hits for relevant pubmed articles"},{"location":"notes/Databases/","text":"Databases used in this project UniProt Two primary sections: 1. Swiss-Prot/ Reviewed: Manually annotated records 2. TrEMBL/ Unreviewed: Computationally annotated records Subset of UniProtKB \u2014 Proteomes data set Allows search via: BLAST (local alignment) Multiple sequence alignment ID Mapping \u2018Peptide search\u2019 for 3 or more residues Reactome Pathway Database Compilation of many sources of data including Kegg, UniProt, NCBI, Ensemble, etc. Manually curated, open-source, peer-reviewed Neo4J representation exists. Integrated with Spring Data Neo4j Tutorial on extracting different data types/building reactome cypher queries: https://reactome.org/dev/graph-database/extract-participating-molecules Drugbank Comprehensive free database of drugs and drug targets Well maintained 13k+ drug entries, 5k+ protein sequences (drug targets/enzymes/etc) Data base can be downloaded here Free for non-commercial use Contains sub databases to download as well (structures, protein identifiers, target sequences, etc.)","title":"Databases"},{"location":"notes/Databases/#databases-used-in-this-project","text":"","title":"Databases used in this project"},{"location":"notes/Databases/#uniprot","text":"Two primary sections: 1. Swiss-Prot/ Reviewed: Manually annotated records 2. TrEMBL/ Unreviewed: Computationally annotated records Subset of UniProtKB \u2014 Proteomes data set Allows search via: BLAST (local alignment) Multiple sequence alignment ID Mapping \u2018Peptide search\u2019 for 3 or more residues","title":"UniProt"},{"location":"notes/Databases/#reactome-pathway-database","text":"Compilation of many sources of data including Kegg, UniProt, NCBI, Ensemble, etc. Manually curated, open-source, peer-reviewed Neo4J representation exists. Integrated with Spring Data Neo4j Tutorial on extracting different data types/building reactome cypher queries: https://reactome.org/dev/graph-database/extract-participating-molecules","title":"Reactome Pathway Database"},{"location":"notes/Databases/#drugbank","text":"Comprehensive free database of drugs and drug targets Well maintained 13k+ drug entries, 5k+ protein sequences (drug targets/enzymes/etc) Data base can be downloaded here Free for non-commercial use Contains sub databases to download as well (structures, protein identifiers, target sequences, etc.)","title":"Drugbank"},{"location":"notes/ElasticSearch/","text":"ElasticSearch Searching Elastic Search for Articles that reference Drugs and Chemicals related to oxidative stress - Searched pubmed data for co-occurrence of a drug and chemical name in the abstract of a paper - Created list of documents each drug/chemical occurs in for later use Udemy Course Notes Section 2: Architecture of Elastic Search 5 shards per node default Collection of nodes called a cluster Rename cluster since nodes default to entering a cluster named elasticsearch default Default 1 replica per shard Primary shard written to first, then replicas updated Reading occurs on any shard in a replicate group Coordinating Node is the first node a client pings with a search query May not be node with shard containing results May not always be the same node Returns result query after pinging all shards in cluster Can specify how routing occurs Custom routing i.e sending documents to a node/shards based on country of origin The number of shards cannot change after creating an index Elastic cloud is 14day free trial for starting with elastic search and Kibana for ease of use Section 3: Installing ES and Kibana Running default elastic search cluster: ~/Tools/elasticsearch-7.3.2/bin/elasticsearch To ping cluster: curl http://localhost:9200 Change config file cluster name (config/elasticsearch.yml) Running Kibana in default: ~/Tools/kibana-7.3.2-darwin-x86_64/bin/kibana * Requires live elastic search cluster","title":"ElasticSearch"},{"location":"notes/ElasticSearch/#elasticsearch","text":"","title":"ElasticSearch"},{"location":"notes/ElasticSearch/#searching-elastic-search-for-articles-that-reference-drugs-and-chemicals-related-to-oxidative-stress","text":"- Searched pubmed data for co-occurrence of a drug and chemical name in the abstract of a paper - Created list of documents each drug/chemical occurs in for later use","title":"Searching Elastic Search for Articles that reference Drugs and Chemicals related to oxidative stress"},{"location":"notes/ElasticSearch/#udemy-course-notes","text":"","title":"Udemy Course Notes"},{"location":"notes/ElasticSearch/#section-2-architecture-of-elastic-search","text":"5 shards per node default Collection of nodes called a cluster Rename cluster since nodes default to entering a cluster named elasticsearch default Default 1 replica per shard Primary shard written to first, then replicas updated Reading occurs on any shard in a replicate group Coordinating Node is the first node a client pings with a search query May not be node with shard containing results May not always be the same node Returns result query after pinging all shards in cluster Can specify how routing occurs Custom routing i.e sending documents to a node/shards based on country of origin The number of shards cannot change after creating an index Elastic cloud is 14day free trial for starting with elastic search and Kibana for ease of use","title":"Section 2: Architecture of Elastic Search"},{"location":"notes/ElasticSearch/#section-3-installing-es-and-kibana","text":"Running default elastic search cluster: ~/Tools/elasticsearch-7.3.2/bin/elasticsearch To ping cluster: curl http://localhost:9200 Change config file cluster name (config/elasticsearch.yml) Running Kibana in default: ~/Tools/kibana-7.3.2-darwin-x86_64/bin/kibana * Requires live elastic search cluster","title":"Section 3: Installing ES and Kibana"},{"location":"notes/neo4j/","text":"Neo4j and Cypher Notes Creating Drug/Chemical Co-Occurrence Graph Data on occurance of drugs/chemicals in pubmed abstracts imported generated in section detailed in elasticsearch document Python neo4j-driver used to create a graph data base with the schema: Querying Reactome in Cypher Finding gene products associated with cellular response to oxidative stress MATCH (gt:GO_Term{accession: 0034599 })-[:goBiologicalProcess]-(p:Pathway)-[]-(r:Reaction)-[]-(ge:GenomeEncodedEntity) WHERE ge.speciesName = Homo sapiens RETURN DISTINCT ge.displayName LIMIT 10 Results \"2xHC-TXN2 [mitochondrial matrix]\" \"TXN [cytosol]\" \"P4HB [endoplasmic reticulum lumen]\" \"2xHC-TXN [cytosol]\" \"HC53,56-P4HB [endoplasmic reticulum lumen]\" \"TXN2 [mitochondrial matrix]\" Finding gene products associated with cardiovascular system disease MATCH (d:Disease)-[]-(p:PhysicalEntity) WHERE toLower(toString(d.displayName)) CONTAINS 'card' OR toLower(toString(d.displayName)) CONTAINS 'vasc' RETURN d.displayName, size((d)--(:Drug)) as Drugs, size((d)--(:GenomeEncodedEntity)) as GeneEntities, count(p) AS PhysicalEntityCount, size((d)--(:PhysicalEntity)--(:Disease)) as PEAssocDisease, size((d)--(:PhysicalEntity)--(:ReactionLikeEvent)) as PEAssocReactLike, size((d)--(:PhysicalEntity)--(:GenomeEncodedEntity)) as PEAssocGeneEntities ORDER BY PhysicalEntityCount DESC Results d.displayName Drugs GeneEntities PhysicalEntityCount \"cardiofaciocutaneous syndrome\" 0 23 34 \"myocardial infarction\" 20 0 20 \"basal ganglia cerebrovascular disease\" 0 6 7 \"cerebrovascular disease\" 5 0 5","title":"Neo4J And Cypher"},{"location":"notes/neo4j/#neo4j-and-cypher-notes","text":"","title":"Neo4j and Cypher Notes"},{"location":"notes/neo4j/#creating-drugchemical-co-occurrence-graph","text":"Data on occurance of drugs/chemicals in pubmed abstracts imported generated in section detailed in elasticsearch document Python neo4j-driver used to create a graph data base with the schema:","title":"Creating Drug/Chemical Co-Occurrence Graph"},{"location":"notes/neo4j/#querying-reactome-in-cypher","text":"","title":"Querying Reactome in Cypher"},{"location":"notes/neo4j/#finding-gene-products-associated-with-cellular-response-to-oxidative-stress","text":"MATCH (gt:GO_Term{accession: 0034599 })-[:goBiologicalProcess]-(p:Pathway)-[]-(r:Reaction)-[]-(ge:GenomeEncodedEntity) WHERE ge.speciesName = Homo sapiens RETURN DISTINCT ge.displayName LIMIT 10","title":"Finding gene products associated with cellular response to oxidative stress"},{"location":"notes/neo4j/#results","text":"\"2xHC-TXN2 [mitochondrial matrix]\" \"TXN [cytosol]\" \"P4HB [endoplasmic reticulum lumen]\" \"2xHC-TXN [cytosol]\" \"HC53,56-P4HB [endoplasmic reticulum lumen]\" \"TXN2 [mitochondrial matrix]\"","title":"Results"},{"location":"notes/neo4j/#finding-gene-products-associated-with-cardiovascular-system-disease","text":"MATCH (d:Disease)-[]-(p:PhysicalEntity) WHERE toLower(toString(d.displayName)) CONTAINS 'card' OR toLower(toString(d.displayName)) CONTAINS 'vasc' RETURN d.displayName, size((d)--(:Drug)) as Drugs, size((d)--(:GenomeEncodedEntity)) as GeneEntities, count(p) AS PhysicalEntityCount, size((d)--(:PhysicalEntity)--(:Disease)) as PEAssocDisease, size((d)--(:PhysicalEntity)--(:ReactionLikeEvent)) as PEAssocReactLike, size((d)--(:PhysicalEntity)--(:GenomeEncodedEntity)) as PEAssocGeneEntities ORDER BY PhysicalEntityCount DESC","title":"Finding gene products associated with cardiovascular system disease"},{"location":"notes/neo4j/#results_1","text":"d.displayName Drugs GeneEntities PhysicalEntityCount \"cardiofaciocutaneous syndrome\" 0 23 34 \"myocardial infarction\" 20 0 20 \"basal ganglia cerebrovascular disease\" 0 6 7 \"cerebrovascular disease\" 5 0 5","title":"Results"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/","text":"DNA Repair Pathway Khan Academy Medicine Notes DNA Repair 1- khanacademymedicine Pyrimidines: Thymine/Cytosine - single ring structure (6 sided) Purines: Adenine/Guanine - two rings (6 + 5 sides) DNA polymerase III can recognize errors and repair them from end of DNA strand its synthesizing Exonuclease activity: removing nucleotide at END of a DNA strand For DNAP III it is 3\u2019-5\u2019 specifically DNA Pol I has exonuclease activity in the 5\u2019-3\u2019 direction Is used normally to turn RNA primer of DNA synthesis in to DNA Repair capabilities of DNAP I and III turn error rate from 1 in 100k, to 1 in 100 million Mismatch repair mechanism: 1. One end marked with a cut 2. Exonuclease removes one side of mismatch 3. DNA polymerase adds correct basepair in 4. DNA ligases fix cut * Methylation used to distinguish which strand is correct in prokaryotes * Mechanism unknown in eukaryotes DNA Repair 2- khanacademymedicine UV light can damage DNA via creation of pyrimidine dimers Thymine-Thymine or Cytosine-Cytosine: DNA Damage \u2260 DNA Mutation Damage (like in UV light) Structure is altered, but sequence is the same Nucleotide Excision Repair: Fixes DNA damage * Endonuclease: Cuts out structurally aberrant nucleotides * DNA polymerase re-adds correct nucleotides * DNA Ligase fixes backbone and connects new nucleotides to appropriate base Summary: Reactome Pathway Visualizer DNA Repair Node: R-HSA-73894.3 Specific mechanisms of repair depend on cell type, cell cycle, and cellular environment Utilization of low fidelity \u201clast resort\u201d mechanisms associated with senescence, aging, and cancer Germline mutations in dna repair genes are underlying causes of many familial cancer syndromes When level of DNA damage exceeds DNA repair mechanism capacity, cell undergoes apoptosis Actively dividing cells have limited time available for DNA repair, making them sensitive to DNA damaging agents Several primary pathways of human DNA repair. They are intimately associated with DNA replication, recombination, cell cycle, and apoptosis DNA damage bypass Does not remove damage, but allows trans-lesion DNA synthesis (TLS) using a damaged template strand. TLS allows cells to complete DNA replication postponing repair until cell division finishes. DNA polymerases utilized are error-prone, frequently introducing base substitutions and/or small insertions and deletions DNA damage reversal Acts on a very narrow spectrum of damaging base modifications to remove modifying groups and restore bases to original state Base excision repair (BER) Involves several DNA glycosylases that cleave a vast array of damaged bases from the DNA sugar-phosphate backbone Glycosylases create an abasic site that is then processed by endonuclease, polymerases, and ligases. Choice of processing depends on cell cycle stage, glycosylase identity, and presence of additional damage Yields error free DNA molecules Nucleotide excision repair (NER) Removes bulky lesions that cause distortion of the DNA double helix Excise oligonucleotide that contains the lesion from affected DNA strand Followed by gap filling DNA synthesis and ligation of repaired molecule Mismatch repair (MMR) MMR proteins recognize mismatched BPs or small indel loops during DNA replication and correct erroneous pairing by excising mismatched nucleotides exclusively from nascent DNA strand leaving template in tact Repair of double strand breaks (DSBs) Can be repaired very accurately with homologous recombination repair (HRR) Other error prone pathways to repair include: non homologous end joining (NHEJ) Single Strand annealing (SSA) Microhomology-mediated end joining (MMEJ) DSBs generated through DNA damaging agents like X-rays or Reactive oxygen species (ROS) Are also intermediates of the Fanconi Anemia pathway Repair of interstrand crosslinks (Fanconi anemia pathway) Inter-stand cross-linking (ICL) agents damage DNA by introducing covalent bonds between two DNA strands, this prevents progression of a DNA replication fork Fanconi anemia proteins repair ICLs by unhooking them from on DNA strand. TLS enables replication fork to bypass unhooked ICL resulting in two replicated DNA molecules One contains a DSB and triggers double strand break repair One contains bulky unhooked ICL that is removed using NER Suggested review: Lindahl and Wood 1999 and Curtin 2012 Fanconi Anemia (FA) Pathway: R-HSA-6783310.2 FA is a genetic disease of genome instability characterized by congenital skeletal defects, aplastic anemia, leukemia susceptibility, cellular sensitivity to DNA damaging events 15 complementation groups (FA-A, -B, -C, -D1, -D2, -E, -F, -G, -I, -J, -L, -M, -N, -O and -P) Groups correspond to the genes: FANCA, FANCB, FANCC, FANCD1/BRCA2, FANCD2, FANCE, FANCF, FANCG, FANCJ/BRIP1, FANCL, FANCM, FANCN/PALB2, FANCO/RAD51C and FANCP/SLX4 Eight of these proteins, FANCA, FANCB, FANCC, FANCE, FANCF, FANCG, FANCL, and FANCM, together with FAAP24, FAAP100, FAAP20, APITD1 and STRA13 Create nuclear complex termed FA Core Complex E3 ubiquitin ligase that recognizes and is activated by ICLs Triggers mono-ubiquitination of FANCD2 and FANCI which initiates repair of ICL-DNA FANCD2 and FANCI form a complex and are mutually dependent on one another for their respective monoubiquitination After DNA damage and during S phase, FANCD2 localizes to discrete nuclear foci that colocalize with proteins involved in homologous recombination repair like BRCA1 and RAD51 FA Regulated by ubiquitination/phosphorilation of FANCD2 and FANCI ATR-dependent phosphorylation of FANCI and FANCD2 promotes monoubiquitination of FANCD2 stimulating FA pathway Monoubiquitinated FANCD2 recruits DNA nucleases including SLX4(FANCP) and FAN1 which unhook the ICL from one of the covalently linked DNA strands DNA polymerase nu (POLN) performs translation DNA synthesis using the DNA strand with the unhooked ICL as a template to bypass the unhooked ICL NER then removes the unhooked ICL Incision of stalled replication fork during the unhooking step generates a DSB repaired via HRR involving BRCA2 (FANCD1), PALB2 (FANCN), and BRIP1(FANCJ) Homozygous mutations in BRCA2, PALB2, or BRIP1 result in FA Heterozygous mutations predispose carriers to breast and ovarian cancer These proteins role in DNA repair is BRCA1 dependent Heterozygous BRCA1 mutations predispose to breast and ovarian cancer with high penetance Loss of BRCA1 is embryonic lethal Partial gremlin loss of BRCA1 function results in FA-like syndrome \u2014 BRCA1 designated FANCS gene monoubiquitination: addition of a single ubiquitin peptide to the lysine of a protein Mismatch Repair (MMR): R-HSA-5358508.1 Corrects single base mismatches and small insertion and deletion loops (IDLs) of unpaired bases. Highly conserved across prokaryotes and eukaryotes Primarily associated with DNA replication Basic Steps: A sensor (MutS homologue) detects mismatch or IDL Activates a set of proteins (MutL homologue and an exonuclease) to select, nick, and exonucleolytically remove region of nucleotides from the nascent strand DNA polymerase resynthesizes the strand Ligase seals the remaining nick Humans have two MutS complexes MSH2:MSH6 heterodimer (MutSalpha) : Recognizes single base mismatches and loops of one or two unpaired bases MSH2:MSH3 heterodimer (MutSbeta) : Recognizes loops of two or more unpaired bases Upon binding mismatch, MutS complex activates in an ATP-dependent manner allowing for interactions and movement on DNA substrate Interacts with MLH1:PMS2 and Exonuclease 1 (EXO1) to initiate excision of the recently replicated strand and direct DNA polymerase delta to initiate replacement of bases. MLH1:PMS2 makes an incision in the strand to be repaired EXO1 extends the incision to make a single stranded gap of up to 1kb that removes the mismatched bases In some assays it has been found the EXO1 is not necessary, not sure why. Most of the time it is necessary Replication Protein A (RPA) binds the single stranded region to prevent rewinding of DNA and allows DNA polymerase delta to synthesize new strand Nick sealed by DNA Ligase I (LIG1) Order of steps and structural details not fully known Concentrations of MMR proteins MSH2:MSH6 and MLH1:PMS2 increase in human cells during the S phase where they are at highest level and activity I.E. MutSalpha has highest activity or potential for activity during DNA replication (between G1 and G2) Defects in MSH2, MSH6, MLH1, and PMS2 cause hereditary nonpolyposis colorectal cancer (HNPCC, also known as Lynch syndrome) Mismatch repair (MMR) directed by MSH2:MSH6 (MutSalpha): R-HSA-5358565.1 Single base mismatches and unpaired loops of 1-2 nucleotides Is about 6-fold more abundant than MSH2:MSH3 (MutSbeta) in humans Imbalance of this ratio can cause mutator phenotype MSH6 subunit binds the mismatch which triggers the MSH2:MSH6 complex to exchange ADP to ATP Conformation changes to allow movement on DNA and interact with downstream effectors PCNA: Initiates excision of the recently replicated strand MLH1:PMS2: endonucleolytic activity to make nick EXO1: enlarges gap to hundreds of nucleotides DNA polymerase delta polymerizes across gap, and remaining nick is sealed by DNA ligase I LIG1 Mismatch repair (MMR) directed by MSH2:MSH3 (MutSbeta): R-HSA-5358606.1 Binds unpaired loops of 2 or more nucleotides 6x lower in concentration than alpha Similar information as for MutSalpha Key differences: MSH3 NOT specified to be the subunit that binds Nucleotide Excision Repair (NER): R-HSA-5696398.2 Tree: Nucleotide Excision Repair (NER) Global Genome Nucleotide Excision Repair (GG-NER) DNA Damage Recognition in GG-NER Dual incision in GG-NER Formation of Incision Complex in GG-NER Gap-filling DNA repair synthesis and ligation in GG-NER Transcription-Coupled Nucleotide Excision Repair (TC-NER) Dual incision in TC-NER Formation of TC-NER Pre-Incision Complex Gap-filling DNA repair synthesis and ligation in TC-NER NER Overview First described in E.coli ~1960 as the process whereby bulky base damage is enzymatically removed from DNA facilitating the recovery of DNA synthesis and cell survival Deficient NER processes linked to increased mutation rate and cancer Unique in prokaryotes but highly conserved in yeast and higher eukaryotes NER involved in repair of bulky adducts in DNA UV-induced photo lesions 6-4 photoproducts (6-4 PDDS) Cyclobutane pyrimidine dimers (CPDs) Chemical adducts formed from exposure to aflatoxin, benzopyrene and other genotoxic agents Two primary pathways: differ in method that DNA damage is initially recognized. Mostly same downstream Global Genome Nucleotide Excision Repair (GG-NER): transcription-independent and removes lesions from coding and non-coding DNA strands that are not being actively transcribed Transcription-coupled nucleotide excision repair (TC-NER): repairs damage in transcribed strands of active genes Several proteins involved in NER are key to basal transcription complex TFIIH. An ubiquitin ligase complex composed of DDB1, CUL4A or CUL4B and RBX1 participates in both GG and TC NER Suggests important role of ubiquitination in NER regulation Mouse models used to establish relation of NER defects and cancer Suggested review: Lindahl and Wood 1998, Friedberg et al. 2002, Christmann et al. 2003, Hanawalt and Spivak 2008, Marteijn et al. 2014 Global Genome Nucleotide Excision Repair (GG-NER): R-HSA-5696399.1 Steps: DNA recognition seen as joint action of two protein complexes First complex (XPC Complex): XPC, RAD23A or RAD23B, CETN2 UV-DDB complex: ubiquitin ligase composed of DDB1, CUL4A or CUL4B, RBX1, and GG-NER specific protein DDB2 In-vitro only necessary for GG-NER mediated repair of UV-induced pyrimidine dimers In vivo, where DNA repair occurs in chromatin context, likely facilitates GG-NER mediated repair irrespective of DNA damage type After damage recognition, TFIIH complex with XPA verifies damage, unwinds helix around damage thereby creating an open bubble Two endonuclease ERCC5 (XPG) and comely of ERCC1 and ERCC4 (XPF) excise oligonucleotide that contains damaged base(s) DNA poly delta, epsilon, and/or kappa perform DNA repair synthesis DNA ligated DNA Damage Recognition in GG-NER: R-HSA-5696394.1 First complex of XPC, RAD23A/RAD23B and CETN2: Probes DNA helix and recognizes disruption in normal Watson-Crick base pairing Results in binding of the XPC:RAD23:CETN2 complex to undamaged DNA strand Second Complex UV-DDB is necessary for recognition of UV-induced DNA damage and may contribute to retention of first complex Binds the damaged DNA strand Dual Incision in GG-NER: R-HSA-5696400.1 Dual incision at the damaged DNA strand excises the oligonucleotide that contains the lesion from the open bible. Excised region is ~27-30 bases long 5\u2019 incision by ERCC1:ERCC4 endonuclease 3\u2019 incision by ERCC5 endonuclease Formation of Incision Complex in GG-NER: R-HSA-5696395.1 After XPC complex and UV-DDB complex bind damaged DNA, a basal transcription factor TFIIH is recruited to the NER site DNA helicases ERCC2 (XPD) and ERCC3 (XPB) are subunits of TFIIH complex ERCC2 unwinds the DNA around the damage in concert with ATPase activity of ERCC3 Creates open bubble Simultaneously presence of the damage is verified by XPA Recruitment of XPA is partially regulated by PARP1 and PARP2 During excision by ERCC1:ERCC4 and ERCC5, RPA heterotrimer coats the undamaged na strand to protect it from endonucleolytic attack Gap-filling DNA repair synthesis and ligation in GG-NER: R-HSA-5696397.1 GG-NER completed by DNA repair synthesis that fills the single stranded gap created after excision Performed by DNA polymerase epsilon or delta or the \u201cY family DNA polymerase kappa\u201d (POLK) LIG1 or LIg3 (as part of LIG3:XRCC1 complex) ligate newly synthesized stretch of oligonucleotides Transcription-Coupled Nucleotide Excision Repair (TC-NER): R-HSA-6781827.1 Damage in transcribed strands of active genes repaired through Transcription-coupled NER Impairment in TC-NER is underlying cause of severe hereditary disorder Cockayne syndrome and an autosomal recessive disease characterized by hypersensitivity to UV light Triggered by helix distorting lesions that block the progression of elongating RNA polymerase II (RNA Pol II) Stalled RNA Pol II complex triggers recruitment of ERCC6 (or CSB Cockayne Syndrome Protein B) which recruits ERCC8 (Cockayne syndrome protein A or CSA) ERC88 has 7 WD repeat motifs (forms a ring of triangles) and is part of ubiquitin ligase complex that includes DDB1 CUL4A or CUL4B and RBX1 SIMILAR in structure to UVDDB from GG-NER but lacks DDB2 Key regulator of TC-NER that may exert role by ubiquitinating one or more factors involved in repair like RNA pol II and ERCC6 TFIIH (transcription elongation factor) recruited to TC-NER site Pre-incision complex includes XPA, XAB2 complex, TCEA1 (TFIIS), HMGN1, UVSSA in complex with USP7, and EP300(p300). XPA probably contributes to assembly and stability of complex as it does in GG-NER XAB2 is involved in pre-mRNA splicing and may modulate structure of nascent mRNA hybrid with template DNA through its RNA-DNA helicase activity TCEA1 may be involved in RNA Pol II backtracking, allows repair proteins to gain access to the damage site Also facilitates trimming of the 3\u2019 end of protruding nascent mRNA from stalled RNA Pol II, enabling recovery of RNA synthesis after repair De-ubiquitinating activity of UVSSA:USP7 complex needed for ERCC6 stability at repair site. Non histone nucleosomal binding protein HMGN1 and histone acetyltransferase p300(EP300) remodels chromatin around the damaged site Dual incision of the lesion-containing oligonucleotide from the affected DNA strand is performed by same molecules as in GG-NER (ERCC1:ERCC4 and ERCC5) Same repair process with DNA Pol delta, epsilon, or kappa followed by DNA ligases LIG1 or LIG3:XRCC1 After damage repair done, RNA synthesis continues by RNA Pol II Base Excision Repair (BER): R-HSA-73884.2 Tree Base Excision Repair (BER) Base-Excision Repair, AP Site Formation Depurination Cleavage of the damaged purine Recognition and association of DNA glycosylase with site containing an affected purine Depyrimidination Cleavage of the damaged pyrimidine Recognition and association of DNA glycosylase with site containing an affected pyrimidine NEIL3-mediated resolution of ICLs Resolution of Abasic Sites (AP sites) APEX1-Independent Resolution of AP Sites via the Single Nucleotide Replacement Pathway Displacement of DNA glycosylase by APEX1 Resolution of AP sites via the multiple-nucleotide patch replacement pathway PCNA-Dependent Long Patch Base Excision Repair POLB-Dependent Long Patch Base Excision Repair Resolution of AP sites via the single-nucleotide replacement pathway Abasic sugar-phosphate removal via the single-nucleotide replacement pathway Overview BER involves the greatest number of individual enzymatic activities of the 3 primary repair pathways Due to numerous individual glycosylases, each of which recognizes and removes a specific modified base(s) from DNA Repairs the most prevalent types of DNA lesions, oxidatively damaged DNA bases, which arise as a consequence of: reactive oxygen species generated by normal mitochondrial metabolism Oxidative free radicals from ionizing radiation Lipid per oxidation or activated phagocytic cells BER is a two step process initiated by a DNA glycosylase that recognizes a specific base modification Base is removed through catalytic cleavage of glycosydic bond, leaving an basic site without disruption of phosphate-sugar backbone Abasic sites are resolved by a series of enzymes that cleave backbone, insert replacement, ligate DNA May occur by either a single nucleotide replacement pathway or a multiple-nucleotide patch replacement pathway depending on structure of terminal sugar phosphate residue Glycosylases found in human cells recognize \u201cforeign adducts\u201d and not standard functional modifications such as DNA methylation Base-Excision Repair, AP Site Formation: R-HSA-73929.2 Initiation of BER is done by DNA glycosylases hydrolytic ally cleaving the base-deoxyribose glycosly bond of a damaged nucleotide residue releasing the damaged base Glycosylase cleaves the N-C1\u2019 glycosidic bond between damaged DNA base and deoxyribose sugar generating a free base and an abasic(e.g apurinic/apyramidic site) Depurination: R-HSA-73927.1 Purine-specific DNA glycosylase mediates this type of removal Glycosylase Proteins involved: NEIL1, NEIL3, NTHL1, OGG1, MUTYH, MPG Cleavage of the damaged purine: R-HSA-110331.2 Damaged purines are cleaved from the sugar-phosphate backbone by purine-specific glycosylases Recognition and association of DNA glycosylase with site containing an affected purine: R-HSA-110330.3 Recognition and removal is thought to involve diffusion of the enzyme along the minor grove of the DNA molecule Enzyme presumable compresses the backbone of the affected DNA strand at the site of damage Compression thought to result in outward rotation of damaged residue into a \u201cpocket\u201d of the enzyme that recognizes and cleaves the altered base from the backbone Depyrimidination: R-HSA-73928.1 Same as above but with pyrimidines Glycosylases involved: MBD4, SMUG1, TDG, UNG-1, NEIL2 NEIL3-mediated resolution of ICLs: R-HSA-9636003.1 DNA Glycosylase activity of NEIL3 involved in unhooking (resolution) of psolaren-induced inter stand crosslinks (ICLs) as well as basic site-induced ICLs in a Fanconia anemia pathway-independent fashion Resolution of Abasic Sites (AP sites): R-HSA-73933.1 Resolution occurs through multiple nucleotide patch replacement pathway or single nucleotide replacement Single and multiple-nucleotide patch replacement are both initiated by APEX1-mediated displacement of DNA glycosylases and cleavage of the damaged DNA strand by APEX immediately 5\u2019 to the AP site. Not true for APEX-1independent resolution of AP sites via single nucleotide BER via NEIL1 or NEIL2 Single NR when the AP residue at the 5\u2019 end of the APEX1-created single stranded break (SSB) (5\u2019dRP) can be removed by the 5\u2019 exonuclease activity of DNA polymerase beta (POLB) POLB fills the single nucleotide gap by adding a complementary nucleotide to the undamaged DNA strand at the 3\u2019 end of the SSB Patch replacement pathway when AP residue at the 5\u2019 end of APEX1-created SSB undergoes oxidation related damage (5\u2019ddRP) and cannot be cleaved by POLB Long patch BER can be completed by POLB-mediated DNA strand displacement synthesis in presence of PARP1 or PARP2, FEN1, and DNA Ligase I When PCNA-containing replication complex is available, as with cells in S-phase, DNA strand displacement synthesis is catalyzed by DNA polymerase delta (POLD) or DNA polymerase epsilon (POLE) complezes In the presence of PCNA, RPA, RFC, APEX1, FEN1, and LIG1 9-1-1 repair complex of HUS1, RAD1, and RAD9 interacts with and coordinates components of BER but mechanism/timing unknown Displacement of DNA glycosylase by APEX1: R-HSA-110357.1 Following cleavage of the damaged base, DNA glycosylase is displaced by APEX1 an AP endonuclease Resolution of AP sites via the single-nucleotide replacement pathway: R-HSA-110381.1 Facilitates repair of most damaged bases APEX1 is recruited to site of damage where it cleaves 5\u2019 side of the basic (AP) residue. [SUB PATHWAY: R-HSA-73930.] DNA polymerase Beta (POLB) then cleaves the 3\u2019 side of AP sugar phosphate excising the AP residue Alternate pathway used if this not possible due to oxidative damage of 5\u2019 side APEX1 is released and XRCC1:LIG3 complex recruited POLB mediates synthesis of the replacement residue and LIG3 ligation XRCC1:LIG3 complex dissociates from DNA Resolution of AP sites via the multiple-nucleotide patch replacement pathway: R-HSA-110373.1 Used when POLB cannot cleave 3\u2019 side due to nature of 5\u2019-terminal sugar phosphate structure In this scenario, short stretch of residues containing the basic site is excised and replaced Following Glycosylaze mediated cleavage of damaged base, APEX1 cleaves 5\u2019 side of basic residue POLB then synthesizes the firs replacement residue without prior cleavage of the 5\u2019-terminal sugar phosphate, displacing this entitiy Can be continued by POLB-mediated DNA strand displacement synthesis in presence of PARP1 or PARP2, FEN1, and DINA Ligase 1 If PCNA-containing replication complex available (as during S-phase), displacement synthesis catalyzed by POLD or POLE complexes Occurs in presence of PCNA, RPA, RFC, APEX1, FEN1, and LIG1 In both POLB and PCNA dependent displacement synthesis displaced DNA strand with basic phosphate creates a flap structure that is recognized and cleaved by FEN1. Replacement residues are then ligated by LIG1 TODO: Both downstream nodes of this one (POLB and PCNA dependent replacement) APEX1-Independent Resolution of AP Sites via the Single Nucleotide Replacement Pathway: R-HSA-5649702.1 NEIL1 and NEIL2 have a dual DNA glycosylase and beta/delta lyase activity. The AP site directed activity of NEIL1 and 2 is their major physiological role They act on AP sites generated spontaneously or by other glycosylases Cleaves the damaged DNA strand at the 5\u2019 AP site created a 3\u2019 phosphate terminus (3\u2019Pi) and a (5\u2019dRP) POLB excises 5\u2019dRP residue but is unable to add replacement nucleotide with the 3\u2019Pi end PNKP, a DNA 3\u2019phosphatase removes 3\u2019Pi and enables POLB to incorporate replacement nucleotide Ligation done by XRCC1:LIG3 complex","title":"DNA Repair Pathways"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#dna-repair-pathway","text":"","title":"DNA Repair Pathway"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#khan-academy-medicine-notes","text":"","title":"Khan Academy Medicine Notes"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#dna-repair-1-khanacademymedicine","text":"Pyrimidines: Thymine/Cytosine - single ring structure (6 sided) Purines: Adenine/Guanine - two rings (6 + 5 sides) DNA polymerase III can recognize errors and repair them from end of DNA strand its synthesizing Exonuclease activity: removing nucleotide at END of a DNA strand For DNAP III it is 3\u2019-5\u2019 specifically DNA Pol I has exonuclease activity in the 5\u2019-3\u2019 direction Is used normally to turn RNA primer of DNA synthesis in to DNA Repair capabilities of DNAP I and III turn error rate from 1 in 100k, to 1 in 100 million Mismatch repair mechanism: 1. One end marked with a cut 2. Exonuclease removes one side of mismatch 3. DNA polymerase adds correct basepair in 4. DNA ligases fix cut * Methylation used to distinguish which strand is correct in prokaryotes * Mechanism unknown in eukaryotes","title":"DNA Repair 1- khanacademymedicine"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#dna-repair-2-khanacademymedicine","text":"UV light can damage DNA via creation of pyrimidine dimers Thymine-Thymine or Cytosine-Cytosine: DNA Damage \u2260 DNA Mutation Damage (like in UV light) Structure is altered, but sequence is the same Nucleotide Excision Repair: Fixes DNA damage * Endonuclease: Cuts out structurally aberrant nucleotides * DNA polymerase re-adds correct nucleotides * DNA Ligase fixes backbone and connects new nucleotides to appropriate base Summary:","title":"DNA Repair 2- khanacademymedicine"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#reactome-pathway-visualizer","text":"","title":"Reactome Pathway Visualizer"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#dna-repair-node-r-hsa-738943","text":"Specific mechanisms of repair depend on cell type, cell cycle, and cellular environment Utilization of low fidelity \u201clast resort\u201d mechanisms associated with senescence, aging, and cancer Germline mutations in dna repair genes are underlying causes of many familial cancer syndromes When level of DNA damage exceeds DNA repair mechanism capacity, cell undergoes apoptosis Actively dividing cells have limited time available for DNA repair, making them sensitive to DNA damaging agents Several primary pathways of human DNA repair. They are intimately associated with DNA replication, recombination, cell cycle, and apoptosis DNA damage bypass Does not remove damage, but allows trans-lesion DNA synthesis (TLS) using a damaged template strand. TLS allows cells to complete DNA replication postponing repair until cell division finishes. DNA polymerases utilized are error-prone, frequently introducing base substitutions and/or small insertions and deletions DNA damage reversal Acts on a very narrow spectrum of damaging base modifications to remove modifying groups and restore bases to original state Base excision repair (BER) Involves several DNA glycosylases that cleave a vast array of damaged bases from the DNA sugar-phosphate backbone Glycosylases create an abasic site that is then processed by endonuclease, polymerases, and ligases. Choice of processing depends on cell cycle stage, glycosylase identity, and presence of additional damage Yields error free DNA molecules Nucleotide excision repair (NER) Removes bulky lesions that cause distortion of the DNA double helix Excise oligonucleotide that contains the lesion from affected DNA strand Followed by gap filling DNA synthesis and ligation of repaired molecule Mismatch repair (MMR) MMR proteins recognize mismatched BPs or small indel loops during DNA replication and correct erroneous pairing by excising mismatched nucleotides exclusively from nascent DNA strand leaving template in tact Repair of double strand breaks (DSBs) Can be repaired very accurately with homologous recombination repair (HRR) Other error prone pathways to repair include: non homologous end joining (NHEJ) Single Strand annealing (SSA) Microhomology-mediated end joining (MMEJ) DSBs generated through DNA damaging agents like X-rays or Reactive oxygen species (ROS) Are also intermediates of the Fanconi Anemia pathway Repair of interstrand crosslinks (Fanconi anemia pathway) Inter-stand cross-linking (ICL) agents damage DNA by introducing covalent bonds between two DNA strands, this prevents progression of a DNA replication fork Fanconi anemia proteins repair ICLs by unhooking them from on DNA strand. TLS enables replication fork to bypass unhooked ICL resulting in two replicated DNA molecules One contains a DSB and triggers double strand break repair One contains bulky unhooked ICL that is removed using NER Suggested review: Lindahl and Wood 1999 and Curtin 2012","title":"DNA Repair Node: R-HSA-73894.3"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#fanconi-anemia-fa-pathway-r-hsa-67833102","text":"FA is a genetic disease of genome instability characterized by congenital skeletal defects, aplastic anemia, leukemia susceptibility, cellular sensitivity to DNA damaging events 15 complementation groups (FA-A, -B, -C, -D1, -D2, -E, -F, -G, -I, -J, -L, -M, -N, -O and -P) Groups correspond to the genes: FANCA, FANCB, FANCC, FANCD1/BRCA2, FANCD2, FANCE, FANCF, FANCG, FANCJ/BRIP1, FANCL, FANCM, FANCN/PALB2, FANCO/RAD51C and FANCP/SLX4 Eight of these proteins, FANCA, FANCB, FANCC, FANCE, FANCF, FANCG, FANCL, and FANCM, together with FAAP24, FAAP100, FAAP20, APITD1 and STRA13 Create nuclear complex termed FA Core Complex E3 ubiquitin ligase that recognizes and is activated by ICLs Triggers mono-ubiquitination of FANCD2 and FANCI which initiates repair of ICL-DNA FANCD2 and FANCI form a complex and are mutually dependent on one another for their respective monoubiquitination After DNA damage and during S phase, FANCD2 localizes to discrete nuclear foci that colocalize with proteins involved in homologous recombination repair like BRCA1 and RAD51 FA Regulated by ubiquitination/phosphorilation of FANCD2 and FANCI ATR-dependent phosphorylation of FANCI and FANCD2 promotes monoubiquitination of FANCD2 stimulating FA pathway Monoubiquitinated FANCD2 recruits DNA nucleases including SLX4(FANCP) and FAN1 which unhook the ICL from one of the covalently linked DNA strands DNA polymerase nu (POLN) performs translation DNA synthesis using the DNA strand with the unhooked ICL as a template to bypass the unhooked ICL NER then removes the unhooked ICL Incision of stalled replication fork during the unhooking step generates a DSB repaired via HRR involving BRCA2 (FANCD1), PALB2 (FANCN), and BRIP1(FANCJ) Homozygous mutations in BRCA2, PALB2, or BRIP1 result in FA Heterozygous mutations predispose carriers to breast and ovarian cancer These proteins role in DNA repair is BRCA1 dependent Heterozygous BRCA1 mutations predispose to breast and ovarian cancer with high penetance Loss of BRCA1 is embryonic lethal Partial gremlin loss of BRCA1 function results in FA-like syndrome \u2014 BRCA1 designated FANCS gene monoubiquitination: addition of a single ubiquitin peptide to the lysine of a protein","title":"Fanconi Anemia (FA) Pathway: R-HSA-6783310.2"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#mismatch-repair-mmr-r-hsa-53585081","text":"Corrects single base mismatches and small insertion and deletion loops (IDLs) of unpaired bases. Highly conserved across prokaryotes and eukaryotes Primarily associated with DNA replication Basic Steps: A sensor (MutS homologue) detects mismatch or IDL Activates a set of proteins (MutL homologue and an exonuclease) to select, nick, and exonucleolytically remove region of nucleotides from the nascent strand DNA polymerase resynthesizes the strand Ligase seals the remaining nick Humans have two MutS complexes MSH2:MSH6 heterodimer (MutSalpha) : Recognizes single base mismatches and loops of one or two unpaired bases MSH2:MSH3 heterodimer (MutSbeta) : Recognizes loops of two or more unpaired bases Upon binding mismatch, MutS complex activates in an ATP-dependent manner allowing for interactions and movement on DNA substrate Interacts with MLH1:PMS2 and Exonuclease 1 (EXO1) to initiate excision of the recently replicated strand and direct DNA polymerase delta to initiate replacement of bases. MLH1:PMS2 makes an incision in the strand to be repaired EXO1 extends the incision to make a single stranded gap of up to 1kb that removes the mismatched bases In some assays it has been found the EXO1 is not necessary, not sure why. Most of the time it is necessary Replication Protein A (RPA) binds the single stranded region to prevent rewinding of DNA and allows DNA polymerase delta to synthesize new strand Nick sealed by DNA Ligase I (LIG1) Order of steps and structural details not fully known Concentrations of MMR proteins MSH2:MSH6 and MLH1:PMS2 increase in human cells during the S phase where they are at highest level and activity I.E. MutSalpha has highest activity or potential for activity during DNA replication (between G1 and G2) Defects in MSH2, MSH6, MLH1, and PMS2 cause hereditary nonpolyposis colorectal cancer (HNPCC, also known as Lynch syndrome)","title":"Mismatch Repair (MMR): R-HSA-5358508.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#mismatch-repair-mmr-directed-by-msh2msh6-mutsalpha-r-hsa-53585651","text":"Single base mismatches and unpaired loops of 1-2 nucleotides Is about 6-fold more abundant than MSH2:MSH3 (MutSbeta) in humans Imbalance of this ratio can cause mutator phenotype MSH6 subunit binds the mismatch which triggers the MSH2:MSH6 complex to exchange ADP to ATP Conformation changes to allow movement on DNA and interact with downstream effectors PCNA: Initiates excision of the recently replicated strand MLH1:PMS2: endonucleolytic activity to make nick EXO1: enlarges gap to hundreds of nucleotides DNA polymerase delta polymerizes across gap, and remaining nick is sealed by DNA ligase I LIG1","title":"Mismatch repair (MMR) directed by MSH2:MSH6 (MutSalpha): R-HSA-5358565.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#mismatch-repair-mmr-directed-by-msh2msh3-mutsbeta-r-hsa-53586061","text":"Binds unpaired loops of 2 or more nucleotides 6x lower in concentration than alpha Similar information as for MutSalpha Key differences: MSH3 NOT specified to be the subunit that binds","title":"Mismatch repair (MMR) directed by MSH2:MSH3 (MutSbeta): R-HSA-5358606.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#nucleotide-excision-repair-ner-r-hsa-56963982","text":"Tree: Nucleotide Excision Repair (NER) Global Genome Nucleotide Excision Repair (GG-NER) DNA Damage Recognition in GG-NER Dual incision in GG-NER Formation of Incision Complex in GG-NER Gap-filling DNA repair synthesis and ligation in GG-NER Transcription-Coupled Nucleotide Excision Repair (TC-NER) Dual incision in TC-NER Formation of TC-NER Pre-Incision Complex Gap-filling DNA repair synthesis and ligation in TC-NER NER Overview First described in E.coli ~1960 as the process whereby bulky base damage is enzymatically removed from DNA facilitating the recovery of DNA synthesis and cell survival Deficient NER processes linked to increased mutation rate and cancer Unique in prokaryotes but highly conserved in yeast and higher eukaryotes NER involved in repair of bulky adducts in DNA UV-induced photo lesions 6-4 photoproducts (6-4 PDDS) Cyclobutane pyrimidine dimers (CPDs) Chemical adducts formed from exposure to aflatoxin, benzopyrene and other genotoxic agents Two primary pathways: differ in method that DNA damage is initially recognized. Mostly same downstream Global Genome Nucleotide Excision Repair (GG-NER): transcription-independent and removes lesions from coding and non-coding DNA strands that are not being actively transcribed Transcription-coupled nucleotide excision repair (TC-NER): repairs damage in transcribed strands of active genes Several proteins involved in NER are key to basal transcription complex TFIIH. An ubiquitin ligase complex composed of DDB1, CUL4A or CUL4B and RBX1 participates in both GG and TC NER Suggests important role of ubiquitination in NER regulation Mouse models used to establish relation of NER defects and cancer Suggested review: Lindahl and Wood 1998, Friedberg et al. 2002, Christmann et al. 2003, Hanawalt and Spivak 2008, Marteijn et al. 2014","title":"Nucleotide Excision Repair (NER): R-HSA-5696398.2"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#global-genome-nucleotide-excision-repair-gg-ner-r-hsa-56963991","text":"Steps: DNA recognition seen as joint action of two protein complexes First complex (XPC Complex): XPC, RAD23A or RAD23B, CETN2 UV-DDB complex: ubiquitin ligase composed of DDB1, CUL4A or CUL4B, RBX1, and GG-NER specific protein DDB2 In-vitro only necessary for GG-NER mediated repair of UV-induced pyrimidine dimers In vivo, where DNA repair occurs in chromatin context, likely facilitates GG-NER mediated repair irrespective of DNA damage type After damage recognition, TFIIH complex with XPA verifies damage, unwinds helix around damage thereby creating an open bubble Two endonuclease ERCC5 (XPG) and comely of ERCC1 and ERCC4 (XPF) excise oligonucleotide that contains damaged base(s) DNA poly delta, epsilon, and/or kappa perform DNA repair synthesis DNA ligated","title":"Global Genome Nucleotide Excision Repair (GG-NER): R-HSA-5696399.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#dna-damage-recognition-in-gg-ner-r-hsa-56963941","text":"First complex of XPC, RAD23A/RAD23B and CETN2: Probes DNA helix and recognizes disruption in normal Watson-Crick base pairing Results in binding of the XPC:RAD23:CETN2 complex to undamaged DNA strand Second Complex UV-DDB is necessary for recognition of UV-induced DNA damage and may contribute to retention of first complex Binds the damaged DNA strand","title":"DNA Damage Recognition in GG-NER: R-HSA-5696394.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#dual-incision-in-gg-ner-r-hsa-56964001","text":"Dual incision at the damaged DNA strand excises the oligonucleotide that contains the lesion from the open bible. Excised region is ~27-30 bases long 5\u2019 incision by ERCC1:ERCC4 endonuclease 3\u2019 incision by ERCC5 endonuclease","title":"Dual Incision in GG-NER: R-HSA-5696400.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#formation-of-incision-complex-in-gg-ner-r-hsa-56963951","text":"After XPC complex and UV-DDB complex bind damaged DNA, a basal transcription factor TFIIH is recruited to the NER site DNA helicases ERCC2 (XPD) and ERCC3 (XPB) are subunits of TFIIH complex ERCC2 unwinds the DNA around the damage in concert with ATPase activity of ERCC3 Creates open bubble Simultaneously presence of the damage is verified by XPA Recruitment of XPA is partially regulated by PARP1 and PARP2 During excision by ERCC1:ERCC4 and ERCC5, RPA heterotrimer coats the undamaged na strand to protect it from endonucleolytic attack","title":"Formation of Incision Complex in GG-NER: R-HSA-5696395.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#gap-filling-dna-repair-synthesis-and-ligation-in-gg-ner-r-hsa-56963971","text":"GG-NER completed by DNA repair synthesis that fills the single stranded gap created after excision Performed by DNA polymerase epsilon or delta or the \u201cY family DNA polymerase kappa\u201d (POLK) LIG1 or LIg3 (as part of LIG3:XRCC1 complex) ligate newly synthesized stretch of oligonucleotides","title":"Gap-filling DNA repair synthesis and ligation in GG-NER: R-HSA-5696397.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#transcription-coupled-nucleotide-excision-repair-tc-ner-r-hsa-67818271","text":"Damage in transcribed strands of active genes repaired through Transcription-coupled NER Impairment in TC-NER is underlying cause of severe hereditary disorder Cockayne syndrome and an autosomal recessive disease characterized by hypersensitivity to UV light Triggered by helix distorting lesions that block the progression of elongating RNA polymerase II (RNA Pol II) Stalled RNA Pol II complex triggers recruitment of ERCC6 (or CSB Cockayne Syndrome Protein B) which recruits ERCC8 (Cockayne syndrome protein A or CSA) ERC88 has 7 WD repeat motifs (forms a ring of triangles) and is part of ubiquitin ligase complex that includes DDB1 CUL4A or CUL4B and RBX1 SIMILAR in structure to UVDDB from GG-NER but lacks DDB2 Key regulator of TC-NER that may exert role by ubiquitinating one or more factors involved in repair like RNA pol II and ERCC6 TFIIH (transcription elongation factor) recruited to TC-NER site Pre-incision complex includes XPA, XAB2 complex, TCEA1 (TFIIS), HMGN1, UVSSA in complex with USP7, and EP300(p300). XPA probably contributes to assembly and stability of complex as it does in GG-NER XAB2 is involved in pre-mRNA splicing and may modulate structure of nascent mRNA hybrid with template DNA through its RNA-DNA helicase activity TCEA1 may be involved in RNA Pol II backtracking, allows repair proteins to gain access to the damage site Also facilitates trimming of the 3\u2019 end of protruding nascent mRNA from stalled RNA Pol II, enabling recovery of RNA synthesis after repair De-ubiquitinating activity of UVSSA:USP7 complex needed for ERCC6 stability at repair site. Non histone nucleosomal binding protein HMGN1 and histone acetyltransferase p300(EP300) remodels chromatin around the damaged site Dual incision of the lesion-containing oligonucleotide from the affected DNA strand is performed by same molecules as in GG-NER (ERCC1:ERCC4 and ERCC5) Same repair process with DNA Pol delta, epsilon, or kappa followed by DNA ligases LIG1 or LIG3:XRCC1 After damage repair done, RNA synthesis continues by RNA Pol II","title":"Transcription-Coupled Nucleotide Excision Repair (TC-NER): R-HSA-6781827.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#base-excision-repair-ber-r-hsa-738842","text":"Tree Base Excision Repair (BER) Base-Excision Repair, AP Site Formation Depurination Cleavage of the damaged purine Recognition and association of DNA glycosylase with site containing an affected purine Depyrimidination Cleavage of the damaged pyrimidine Recognition and association of DNA glycosylase with site containing an affected pyrimidine NEIL3-mediated resolution of ICLs Resolution of Abasic Sites (AP sites) APEX1-Independent Resolution of AP Sites via the Single Nucleotide Replacement Pathway Displacement of DNA glycosylase by APEX1 Resolution of AP sites via the multiple-nucleotide patch replacement pathway PCNA-Dependent Long Patch Base Excision Repair POLB-Dependent Long Patch Base Excision Repair Resolution of AP sites via the single-nucleotide replacement pathway Abasic sugar-phosphate removal via the single-nucleotide replacement pathway Overview BER involves the greatest number of individual enzymatic activities of the 3 primary repair pathways Due to numerous individual glycosylases, each of which recognizes and removes a specific modified base(s) from DNA Repairs the most prevalent types of DNA lesions, oxidatively damaged DNA bases, which arise as a consequence of: reactive oxygen species generated by normal mitochondrial metabolism Oxidative free radicals from ionizing radiation Lipid per oxidation or activated phagocytic cells BER is a two step process initiated by a DNA glycosylase that recognizes a specific base modification Base is removed through catalytic cleavage of glycosydic bond, leaving an basic site without disruption of phosphate-sugar backbone Abasic sites are resolved by a series of enzymes that cleave backbone, insert replacement, ligate DNA May occur by either a single nucleotide replacement pathway or a multiple-nucleotide patch replacement pathway depending on structure of terminal sugar phosphate residue Glycosylases found in human cells recognize \u201cforeign adducts\u201d and not standard functional modifications such as DNA methylation","title":"Base Excision Repair (BER): R-HSA-73884.2"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#base-excision-repair-ap-site-formation-r-hsa-739292","text":"Initiation of BER is done by DNA glycosylases hydrolytic ally cleaving the base-deoxyribose glycosly bond of a damaged nucleotide residue releasing the damaged base Glycosylase cleaves the N-C1\u2019 glycosidic bond between damaged DNA base and deoxyribose sugar generating a free base and an abasic(e.g apurinic/apyramidic site)","title":"Base-Excision Repair, AP Site Formation: R-HSA-73929.2"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#depurination-r-hsa-739271","text":"Purine-specific DNA glycosylase mediates this type of removal Glycosylase Proteins involved: NEIL1, NEIL3, NTHL1, OGG1, MUTYH, MPG","title":"Depurination: R-HSA-73927.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#cleavage-of-the-damaged-purine-r-hsa-1103312","text":"Damaged purines are cleaved from the sugar-phosphate backbone by purine-specific glycosylases","title":"Cleavage of the damaged purine: R-HSA-110331.2"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#recognition-and-association-of-dna-glycosylase-with-site-containing-an-affected-purine-r-hsa-1103303","text":"Recognition and removal is thought to involve diffusion of the enzyme along the minor grove of the DNA molecule Enzyme presumable compresses the backbone of the affected DNA strand at the site of damage Compression thought to result in outward rotation of damaged residue into a \u201cpocket\u201d of the enzyme that recognizes and cleaves the altered base from the backbone","title":"Recognition and association of DNA glycosylase with site containing an affected purine: R-HSA-110330.3"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#depyrimidination-r-hsa-739281","text":"Same as above but with pyrimidines Glycosylases involved: MBD4, SMUG1, TDG, UNG-1, NEIL2","title":"Depyrimidination: R-HSA-73928.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#neil3-mediated-resolution-of-icls-r-hsa-96360031","text":"DNA Glycosylase activity of NEIL3 involved in unhooking (resolution) of psolaren-induced inter stand crosslinks (ICLs) as well as basic site-induced ICLs in a Fanconia anemia pathway-independent fashion","title":"NEIL3-mediated resolution of ICLs: R-HSA-9636003.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#resolution-of-abasic-sites-ap-sites-r-hsa-739331","text":"Resolution occurs through multiple nucleotide patch replacement pathway or single nucleotide replacement Single and multiple-nucleotide patch replacement are both initiated by APEX1-mediated displacement of DNA glycosylases and cleavage of the damaged DNA strand by APEX immediately 5\u2019 to the AP site. Not true for APEX-1independent resolution of AP sites via single nucleotide BER via NEIL1 or NEIL2 Single NR when the AP residue at the 5\u2019 end of the APEX1-created single stranded break (SSB) (5\u2019dRP) can be removed by the 5\u2019 exonuclease activity of DNA polymerase beta (POLB) POLB fills the single nucleotide gap by adding a complementary nucleotide to the undamaged DNA strand at the 3\u2019 end of the SSB Patch replacement pathway when AP residue at the 5\u2019 end of APEX1-created SSB undergoes oxidation related damage (5\u2019ddRP) and cannot be cleaved by POLB Long patch BER can be completed by POLB-mediated DNA strand displacement synthesis in presence of PARP1 or PARP2, FEN1, and DNA Ligase I When PCNA-containing replication complex is available, as with cells in S-phase, DNA strand displacement synthesis is catalyzed by DNA polymerase delta (POLD) or DNA polymerase epsilon (POLE) complezes In the presence of PCNA, RPA, RFC, APEX1, FEN1, and LIG1 9-1-1 repair complex of HUS1, RAD1, and RAD9 interacts with and coordinates components of BER but mechanism/timing unknown","title":"Resolution of Abasic Sites (AP sites): R-HSA-73933.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#displacement-of-dna-glycosylase-by-apex1-r-hsa-1103571","text":"Following cleavage of the damaged base, DNA glycosylase is displaced by APEX1 an AP endonuclease","title":"Displacement of DNA glycosylase by APEX1: R-HSA-110357.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#resolution-of-ap-sites-via-the-single-nucleotide-replacement-pathway-r-hsa-1103811","text":"Facilitates repair of most damaged bases APEX1 is recruited to site of damage where it cleaves 5\u2019 side of the basic (AP) residue. [SUB PATHWAY: R-HSA-73930.] DNA polymerase Beta (POLB) then cleaves the 3\u2019 side of AP sugar phosphate excising the AP residue Alternate pathway used if this not possible due to oxidative damage of 5\u2019 side APEX1 is released and XRCC1:LIG3 complex recruited POLB mediates synthesis of the replacement residue and LIG3 ligation XRCC1:LIG3 complex dissociates from DNA","title":"Resolution of AP sites via the single-nucleotide replacement pathway: R-HSA-110381.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#resolution-of-ap-sites-via-the-multiple-nucleotide-patch-replacement-pathway-r-hsa-1103731","text":"Used when POLB cannot cleave 3\u2019 side due to nature of 5\u2019-terminal sugar phosphate structure In this scenario, short stretch of residues containing the basic site is excised and replaced Following Glycosylaze mediated cleavage of damaged base, APEX1 cleaves 5\u2019 side of basic residue POLB then synthesizes the firs replacement residue without prior cleavage of the 5\u2019-terminal sugar phosphate, displacing this entitiy Can be continued by POLB-mediated DNA strand displacement synthesis in presence of PARP1 or PARP2, FEN1, and DINA Ligase 1 If PCNA-containing replication complex available (as during S-phase), displacement synthesis catalyzed by POLD or POLE complexes Occurs in presence of PCNA, RPA, RFC, APEX1, FEN1, and LIG1 In both POLB and PCNA dependent displacement synthesis displaced DNA strand with basic phosphate creates a flap structure that is recognized and cleaved by FEN1. Replacement residues are then ligated by LIG1 TODO: Both downstream nodes of this one (POLB and PCNA dependent replacement)","title":"Resolution of AP sites via the multiple-nucleotide patch replacement pathway: R-HSA-110373.1"},{"location":"notes/DNA_Repair_Pathway_Notes/DNA_Repair_Pathways/#apex1-independent-resolution-of-ap-sites-via-the-single-nucleotide-replacement-pathway-r-hsa-56497021","text":"NEIL1 and NEIL2 have a dual DNA glycosylase and beta/delta lyase activity. The AP site directed activity of NEIL1 and 2 is their major physiological role They act on AP sites generated spontaneously or by other glycosylases Cleaves the damaged DNA strand at the 5\u2019 AP site created a 3\u2019 phosphate terminus (3\u2019Pi) and a (5\u2019dRP) POLB excises 5\u2019dRP residue but is unable to add replacement nucleotide with the 3\u2019Pi end PNKP, a DNA 3\u2019phosphatase removes 3\u2019Pi and enables POLB to incorporate replacement nucleotide Ligation done by XRCC1:LIG3 complex","title":"APEX1-Independent Resolution of AP Sites via the Single Nucleotide Replacement Pathway: R-HSA-5649702.1"}]}